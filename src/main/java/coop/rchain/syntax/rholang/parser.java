
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 06 13:54:50 PDT 2017
//----------------------------------------------------

package coop.rchain.syntax.rholang;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 06 13:54:50 PDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\013\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\005\007\000\002\005\003\000\002\006\013\000\002" +
    "\006\013\000\002\006\011\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\006\003" +
    "\000\002\007\005\000\002\007\003\000\002\010\003\000" +
    "\002\010\005\000\002\011\003\000\002\011\004\000\002" +
    "\012\005\000\002\012\007\000\002\013\003\000\002\013" +
    "\005\000\002\014\007\000\002\015\003\000\002\015\004" +
    "\000\002\016\010\000\002\017\003\000\002\017\004\000" +
    "\002\020\003\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\005\000\002\024\006\000\002\025\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\002\000\002" +
    "\027\003\000\002\027\005\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\005\000\002\031\004" +
    "\000\002\031\004\000\002\031\003\000\002\032\007\000" +
    "\002\032\003\000\002\033\011\000\002\033\006\000\002" +
    "\033\006\000\002\033\006\000\002\033\003\000\002\034" +
    "\005\000\002\034\003\000\002\035\002\000\002\035\003" +
    "\000\002\035\005\000\002\036\003\000\002\036\004\000" +
    "\002\036\003\000\002\037\002\000\002\037\003\000\002" +
    "\037\005\000\002\040\005\000\002\041\003\000\002\041" +
    "\005\000\002\042\007\000\002\043\003\000\002\043\004" +
    "\000\002\044\006\000\002\044\005\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\045\003\000\002\045\005\000\002\046" +
    "\003\000\002\046\005\000\002\047\003\000\002\047\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\031\004\001\002\000\004\051\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\026\005\uffb6\020\022\024" +
    "\020\026\016\032\015\043\011\045\021\047\023\050\024" +
    "\052\025\001\002\000\026\005\uffab\010\uffab\013\uffab\016" +
    "\uffab\017\uffab\021\uffab\022\uffab\023\uffab\025\uffab\044\uffab" +
    "\001\002\000\026\005\uffb9\010\uffb9\013\uffb9\016\uffb9\017" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\025\uffb9\044\uffb9\001\002" +
    "\000\006\005\uffb5\017\317\001\002\000\026\005\uffb7\010" +
    "\uffb7\013\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\025\uffb7\044\uffb7\001\002\000\026\005\uffaa\010\uffaa\013" +
    "\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa\025\uffaa" +
    "\044\uffaa\001\002\000\030\005\uffd0\010\uffd0\013\uffd0\016" +
    "\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\035\uffd0" +
    "\044\uffd0\001\002\000\004\005\132\001\002\000\046\004" +
    "\042\011\041\012\040\020\022\024\020\025\uffbc\026\016" +
    "\027\032\032\015\033\046\036\045\037\044\043\011\045" +
    "\021\047\023\050\024\051\031\052\025\001\002\000\026" +
    "\005\uffa7\010\uffa7\013\uffa7\016\uffa7\017\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\025\uffa7\044\uffa7\001\002\000\032\004\042" +
    "\011\041\012\040\024\020\026\016\027\032\032\015\043" +
    "\011\045\021\047\023\050\024\052\025\001\002\000\026" +
    "\005\uffa9\010\uffa9\013\uffa9\016\uffa9\017\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\025\uffa9\044\uffa9\001\002\000\026\005\uffa8" +
    "\010\uffa8\013\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\025\uffa8\044\uffa8\001\002\000\030\005\uffd1\007\026" +
    "\010\uffd1\013\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\025\uffd1\044\uffd1\001\002\000\046\004\042\010\uffbc" +
    "\011\041\012\040\020\022\024\020\026\016\027\032\032" +
    "\015\033\046\036\045\037\044\043\011\045\021\047\023" +
    "\050\024\051\031\052\025\001\002\000\004\010\124\001" +
    "\002\000\022\005\uffcc\010\uffcc\013\uffb9\016\uffcc\017\uffcc" +
    "\023\uffcc\025\uffcc\044\uffcc\001\002\000\004\004\121\001" +
    "\002\000\026\005\uffcb\010\uffcb\013\uffcb\016\uffcb\017\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\025\uffcb\044\uffcb\001\002\000" +
    "\004\013\115\001\002\000\026\005\uffc6\010\uffc6\013\uffc6" +
    "\016\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\025\uffc6\044" +
    "\uffc6\001\002\000\020\005\uffc4\010\uffc4\016\uffc4\017\uffc4" +
    "\023\uffc4\025\uffc4\044\uffc4\001\002\000\020\005\uffbf\010" +
    "\uffbf\016\uffbf\017\uffbf\023\uffbf\025\uffbf\044\uffbf\001\002" +
    "\000\020\005\uffbd\010\uffbd\016\uffbd\017\uffbd\023\uffbd\025" +
    "\uffbd\044\uffbd\001\002\000\024\020\022\024\020\026\016" +
    "\032\015\043\011\045\021\047\023\050\024\052\025\001" +
    "\002\000\024\020\022\024\020\026\016\032\015\043\011" +
    "\045\021\047\023\050\024\052\025\001\002\000\044\004" +
    "\042\011\041\012\040\020\022\024\020\026\016\027\032" +
    "\032\015\033\046\036\045\037\044\043\011\045\021\047" +
    "\023\050\024\051\031\052\025\001\002\000\022\005\uffca" +
    "\010\uffca\013\uffb7\016\uffca\017\uffca\023\uffca\025\uffca\044" +
    "\uffca\001\002\000\010\026\016\035\uffcf\052\103\001\002" +
    "\000\044\004\042\011\041\012\040\020\022\024\020\026" +
    "\016\027\032\032\015\033\046\036\045\037\044\043\011" +
    "\045\021\047\023\050\024\051\031\052\025\001\002\000" +
    "\004\004\054\001\002\000\014\005\uffbb\010\uffbb\016\050" +
    "\017\051\025\uffbb\001\002\000\044\004\042\011\041\012" +
    "\040\020\022\024\020\026\016\027\032\032\015\033\046" +
    "\036\045\037\044\043\011\045\021\047\023\050\024\051" +
    "\031\052\025\001\002\000\052\004\042\005\uffbc\010\uffbc" +
    "\011\041\012\040\020\022\024\020\025\uffbc\026\016\027" +
    "\032\032\015\033\046\036\045\037\044\043\011\045\021" +
    "\047\023\050\024\051\031\052\025\001\002\000\010\005" +
    "\uffba\010\uffba\025\uffba\001\002\000\020\005\uffbe\010\uffbe" +
    "\016\uffbe\017\uffbe\023\uffbe\025\uffbe\044\uffbe\001\002\000" +
    "\024\020\022\024\020\026\016\032\015\043\011\045\021" +
    "\047\023\050\024\052\025\001\002\000\004\021\066\001" +
    "\002\000\006\005\uffb2\022\064\001\002\000\004\005\060" +
    "\001\002\000\004\007\061\001\002\000\044\004\042\011" +
    "\041\012\040\020\022\024\020\026\016\027\032\032\015" +
    "\033\046\036\045\037\044\043\011\045\021\047\023\050" +
    "\024\051\031\052\025\001\002\000\006\010\063\016\050" +
    "\001\002\000\020\005\uffc3\010\uffc3\016\uffc3\017\uffc3\023" +
    "\uffc3\025\uffc3\044\uffc3\001\002\000\024\020\022\024\020" +
    "\026\016\032\015\043\011\045\021\047\023\050\024\052" +
    "\025\001\002\000\004\005\uffb1\001\002\000\024\020\022" +
    "\024\020\026\016\032\015\043\011\045\021\047\023\050" +
    "\024\052\025\001\002\000\006\005\uffb3\022\uffb3\001\002" +
    "\000\006\016\050\044\071\001\002\000\044\004\042\011" +
    "\041\012\040\020\022\024\020\026\016\027\032\032\015" +
    "\033\046\036\045\037\044\043\011\045\021\047\023\050" +
    "\024\051\031\052\025\001\002\000\062\004\042\005\uffaf" +
    "\010\uffaf\011\041\012\040\016\uffaf\017\uffaf\020\022\023" +
    "\uffaf\024\020\025\uffaf\026\016\027\032\032\015\033\046" +
    "\036\045\037\044\043\011\044\uffaf\045\021\047\023\050" +
    "\024\051\031\052\025\001\002\000\006\016\050\023\075" +
    "\001\002\000\020\005\uffc2\010\uffc2\016\uffc2\017\uffc2\023" +
    "\uffc2\025\uffc2\044\uffc2\001\002\000\004\007\076\001\002" +
    "\000\044\004\042\011\041\012\040\020\022\024\020\026" +
    "\016\027\032\032\015\033\046\036\045\037\044\043\011" +
    "\045\021\047\023\050\024\051\031\052\025\001\002\000" +
    "\006\010\100\016\050\001\002\000\062\004\uffb0\005\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\016\uffb0\017\uffb0\020\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\032\uffb0\033\uffb0" +
    "\036\uffb0\037\uffb0\043\uffb0\044\uffb0\045\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\001\002\000\020\005\uffae\010\uffae" +
    "\016\uffae\017\uffae\023\uffae\025\uffae\044\uffae\001\002\000" +
    "\004\035\107\001\002\000\006\017\uffd1\035\uffd1\001\002" +
    "\000\006\017\105\035\uffce\001\002\000\010\026\016\035" +
    "\uffcf\052\103\001\002\000\004\035\uffcd\001\002\000\044" +
    "\004\042\011\041\012\040\020\022\024\020\026\016\027" +
    "\032\032\015\033\046\036\045\037\044\043\011\045\021" +
    "\047\023\050\024\051\031\052\025\001\002\000\020\005" +
    "\uffc1\010\uffc1\016\uffc1\017\uffc1\023\uffc1\025\uffc1\044\uffc1" +
    "\001\002\000\006\005\112\016\050\001\002\000\026\005" +
    "\uffc9\010\uffc9\013\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\025\uffc9\044\uffc9\001\002\000\026\005\uffc8\010" +
    "\uffc8\013\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\025\uffc8\044\uffc8\001\002\000\026\005\uffc7\010\uffc7\013" +
    "\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7" +
    "\044\uffc7\001\002\000\004\004\116\001\002\000\046\004" +
    "\042\005\uffbc\011\041\012\040\020\022\024\020\026\016" +
    "\027\032\032\015\033\046\036\045\037\044\043\011\045" +
    "\021\047\023\050\024\051\031\052\025\001\002\000\004" +
    "\005\120\001\002\000\020\005\uffc5\010\uffc5\016\uffc5\017" +
    "\uffc5\023\uffc5\025\uffc5\044\uffc5\001\002\000\046\004\042" +
    "\005\uffbc\011\041\012\040\020\022\024\020\026\016\027" +
    "\032\032\015\033\046\036\045\037\044\043\011\045\021" +
    "\047\023\050\024\051\031\052\025\001\002\000\004\005" +
    "\123\001\002\000\020\005\uffc0\010\uffc0\016\uffc0\017\uffc0" +
    "\023\uffc0\025\uffc0\044\uffc0\001\002\000\026\005\uffad\010" +
    "\uffad\013\uffad\016\uffad\017\uffad\021\uffad\022\uffad\023\uffad" +
    "\025\uffad\044\uffad\001\002\000\026\005\uffcc\010\uffcc\013" +
    "\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\025\uffcc" +
    "\044\uffcc\001\002\000\026\005\uffca\010\uffca\013\uffca\016" +
    "\uffca\017\uffca\021\uffca\022\uffca\023\uffca\025\uffca\044\uffca" +
    "\001\002\000\026\005\uffb8\010\uffb8\013\uffb8\016\uffb8\017" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\025\uffb8\044\uffb8\001\002" +
    "\000\004\025\131\001\002\000\026\005\uffac\010\uffac\013" +
    "\uffac\016\uffac\017\uffac\021\uffac\022\uffac\023\uffac\025\uffac" +
    "\044\uffac\001\002\000\004\006\133\001\002\000\004\007" +
    "\134\001\002\000\052\004\165\011\160\012\157\020\155" +
    "\024\147\027\145\032\172\033\171\036\170\037\166\040" +
    "\164\041\162\042\141\043\140\045\136\046\156\047\135" +
    "\050\151\051\144\052\142\001\002\000\032\005\uffdb\010" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\022\uffdb" +
    "\023\uffdb\025\uffdb\034\uffdb\044\uffdb\001\002\000\032\005" +
    "\uffd2\010\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\022\uffd2\023\uffd2\025\uffd2\034\uffd2\044\uffd2\001\002\000" +
    "\032\005\uffd5\010\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\022\uffd5\023\uffd5\025\uffd5\034\uffd5\044\uffd5\001" +
    "\002\000\032\005\uffd9\010\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\022\uffd9\023\uffd9\025\uffd9\034\uffd9\044" +
    "\uffd9\001\002\000\004\004\307\001\002\000\032\005\ufffd" +
    "\007\270\010\ufffd\013\uffea\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\022\ufffd\023\ufffd\025\ufffd\044\ufffd\001\002\000\004" +
    "\013\303\001\002\000\004\004\300\001\002\000\032\005" +
    "\uffff\010\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\022\uffff\023\uffff\025\uffff\034\uffff\044\uffff\001\002\000" +
    "\032\005\ufff9\010\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\022\ufff9\023\ufff9\025\ufff9\034\ufff9\044\ufff9\001" +
    "\002\000\052\004\165\011\160\012\157\020\155\024\147" +
    "\027\145\032\172\033\171\036\170\037\166\040\164\041" +
    "\162\042\141\043\140\045\136\046\156\047\135\050\151" +
    "\051\144\052\142\001\002\000\026\005\ufff7\010\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\022\ufff7\023\ufff7\025\ufff7" +
    "\044\ufff7\001\002\000\032\005\uffda\010\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\022\uffda\023\uffda\025\uffda" +
    "\034\uffda\044\uffda\001\002\000\026\005\uffef\010\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\022\uffef\023\uffef\025\uffef" +
    "\044\uffef\001\002\000\032\005\uffde\010\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\022\uffde\023\uffde\025\uffde" +
    "\034\uffde\044\uffde\001\002\000\026\005\uffed\010\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\022\uffed\023\uffed\025\uffed" +
    "\044\uffed\001\002\000\032\004\165\011\160\012\157\024" +
    "\147\027\145\032\172\043\140\045\136\046\156\047\135" +
    "\050\151\052\266\001\002\000\032\005\uffd7\010\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\022\uffd7\023\uffd7" +
    "\025\uffd7\034\uffd7\044\uffd7\001\002\000\006\020\155\052" +
    "\213\001\002\000\006\020\155\052\213\001\002\000\032" +
    "\005\uffd6\010\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\022\uffd6\023\uffd6\025\uffd6\034\uffd6\044\uffd6\001\002" +
    "\000\004\004\254\001\002\000\032\005\uffdc\010\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\022\uffdc\023\uffdc" +
    "\025\uffdc\034\uffdc\044\uffdc\001\002\000\004\007\241\001" +
    "\002\000\052\004\165\011\160\012\157\020\155\024\147" +
    "\027\145\032\172\033\171\036\170\037\166\040\164\041" +
    "\162\042\141\043\140\045\136\046\156\047\135\050\151" +
    "\051\144\052\142\001\002\000\004\052\232\001\002\000" +
    "\006\010\230\016\206\001\002\000\052\004\165\011\160" +
    "\012\157\020\155\024\147\027\145\032\172\033\171\036" +
    "\170\037\166\040\164\041\162\042\141\043\140\045\136" +
    "\046\156\047\135\050\151\051\144\052\142\001\002\000" +
    "\004\004\175\001\002\000\032\005\uffd8\010\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\022\uffd8\023\uffd8\025" +
    "\uffd8\034\uffd8\044\uffd8\001\002\000\032\005\ufffe\010\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\022\ufffe\023" +
    "\ufffe\025\ufffe\034\ufffe\044\ufffe\001\002\000\032\005\uffdd" +
    "\010\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\022" +
    "\uffdd\023\uffdd\025\uffdd\034\uffdd\044\uffdd\001\002\000\024" +
    "\020\022\024\020\026\016\032\015\043\011\045\021\047" +
    "\023\050\024\052\025\001\002\000\004\021\211\001\002" +
    "\000\004\005\203\001\002\000\010\005\uffe6\022\201\023" +
    "\uffe6\001\002\000\024\020\022\024\020\026\016\032\015" +
    "\043\011\045\021\047\023\050\024\052\025\001\002\000" +
    "\006\005\uffe5\023\uffe5\001\002\000\004\007\204\001\002" +
    "\000\052\004\165\011\160\012\157\020\155\024\147\027" +
    "\145\032\172\033\171\036\170\037\166\040\164\041\162" +
    "\042\141\043\140\045\136\046\156\047\135\050\151\051" +
    "\144\052\142\001\002\000\006\010\207\016\206\001\002" +
    "\000\052\004\165\011\160\012\157\020\155\024\147\027" +
    "\145\032\172\033\171\036\170\037\166\040\164\041\162" +
    "\042\141\043\140\045\136\046\156\047\135\050\151\051" +
    "\144\052\142\001\002\000\026\005\ufff4\010\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\022\ufff4\023\ufff4\025\ufff4\044" +
    "\ufff4\001\002\000\026\005\uffee\010\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\022\uffee\023\uffee\025\uffee\044\uffee\001" +
    "\002\000\006\020\155\052\213\001\002\000\016\005\uffe8" +
    "\014\uffe8\015\uffe8\022\uffe8\023\uffe8\034\214\001\002\000" +
    "\032\005\uffea\010\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\022\uffea\023\uffea\025\uffea\034\uffea\044\uffea\001" +
    "\002\000\052\004\165\011\160\012\157\020\155\024\147" +
    "\027\145\032\172\033\171\036\170\037\166\040\164\041" +
    "\162\042\141\043\140\045\136\046\156\047\135\050\151" +
    "\051\144\052\142\001\002\000\016\005\uffe7\014\uffe7\015" +
    "\uffe7\016\206\022\uffe7\023\uffe7\001\002\000\006\016\206" +
    "\044\217\001\002\000\044\004\042\011\041\012\040\020" +
    "\022\024\020\026\016\027\032\032\015\033\046\036\045" +
    "\037\044\043\011\045\021\047\023\050\024\051\031\052" +
    "\025\001\002\000\070\004\042\005\uffe3\010\uffe3\011\041" +
    "\012\040\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\022\022" +
    "\uffe3\023\uffe3\024\020\025\uffe3\026\016\027\032\032\015" +
    "\033\046\036\045\037\044\043\011\044\uffe3\045\021\047" +
    "\023\050\024\051\031\052\025\001\002\000\026\005\ufff2" +
    "\010\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\022\ufff2\023" +
    "\ufff2\025\ufff2\044\ufff2\001\002\000\006\016\050\023\223" +
    "\001\002\000\004\007\224\001\002\000\052\004\165\011" +
    "\160\012\157\020\155\024\147\027\145\032\172\033\171" +
    "\036\170\037\166\040\164\041\162\042\141\043\140\045" +
    "\136\046\156\047\135\050\151\051\144\052\142\001\002" +
    "\000\006\010\226\016\206\001\002\000\070\004\uffe4\005" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\032\uffe4\033\uffe4\036\uffe4\037\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\001" +
    "\002\000\026\005\uffe2\010\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\022\uffe2\023\uffe2\025\uffe2\044\uffe2\001\002\000" +
    "\004\002\000\001\002\000\004\035\235\001\002\000\006" +
    "\017\233\035\uffa4\001\002\000\004\052\232\001\002\000" +
    "\004\035\uffa3\001\002\000\052\004\165\011\160\012\157" +
    "\020\155\024\147\027\145\032\172\033\171\036\170\037" +
    "\166\040\164\041\162\042\141\043\140\045\136\046\156" +
    "\047\135\050\151\051\144\052\142\001\002\000\026\005" +
    "\ufff1\010\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\022\ufff1" +
    "\023\ufff1\025\ufff1\044\ufff1\001\002\000\006\005\240\016" +
    "\206\001\002\000\032\005\ufffc\010\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\022\ufffc\023\ufffc\025\ufffc\034" +
    "\ufffc\044\ufffc\001\002\000\004\030\243\001\002\000\004" +
    "\010\253\001\002\000\024\020\022\024\020\026\016\032" +
    "\015\043\011\045\021\047\023\050\024\052\025\001\002" +
    "\000\006\010\uffe0\030\243\001\002\000\004\010\uffdf\001" +
    "\002\000\004\023\247\001\002\000\004\007\250\001\002" +
    "\000\052\004\165\011\160\012\157\020\155\024\147\027" +
    "\145\032\172\033\171\036\170\037\166\040\164\041\162" +
    "\042\141\043\140\045\136\046\156\047\135\050\151\051" +
    "\144\052\142\001\002\000\006\010\252\016\206\001\002" +
    "\000\006\010\uffe1\030\uffe1\001\002\000\026\005\ufff3\010" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\022\ufff3\023\ufff3" +
    "\025\ufff3\044\ufff3\001\002\000\024\020\022\024\020\026" +
    "\016\032\015\043\011\045\021\047\023\050\024\052\025" +
    "\001\002\000\004\014\256\001\002\000\024\020\022\024" +
    "\020\026\016\032\015\043\011\045\021\047\023\050\024" +
    "\052\025\001\002\000\004\005\260\001\002\000\004\007" +
    "\261\001\002\000\052\004\165\011\160\012\157\020\155" +
    "\024\147\027\145\032\172\033\171\036\170\037\166\040" +
    "\164\041\162\042\141\043\140\045\136\046\156\047\135" +
    "\050\151\051\144\052\142\001\002\000\006\010\263\016" +
    "\206\001\002\000\026\005\ufff6\010\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\022\ufff6\023\ufff6\025\ufff6\044\ufff6\001" +
    "\002\000\032\005\ufffb\010\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\022\ufffb\023\ufffb\025\ufffb\034\ufffb\044" +
    "\ufffb\001\002\000\032\005\ufffa\010\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\022\ufffa\023\ufffa\025\ufffa\034" +
    "\ufffa\044\ufffa\001\002\000\034\005\ufffd\007\270\010\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\022\ufffd\023" +
    "\ufffd\025\ufffd\034\ufffd\044\ufffd\001\002\000\032\005\uffe9" +
    "\010\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\022" +
    "\uffe9\023\uffe9\025\uffe9\034\uffe9\044\uffe9\001\002\000\052" +
    "\004\165\011\160\012\157\020\155\024\147\027\145\032" +
    "\172\033\171\036\170\037\166\040\164\041\162\042\141" +
    "\043\140\045\136\046\156\047\135\050\151\051\144\052" +
    "\142\001\002\000\004\010\275\001\002\000\014\005\uffec" +
    "\010\uffec\016\206\017\273\025\uffec\001\002\000\052\004" +
    "\165\011\160\012\157\020\155\024\147\027\145\032\172" +
    "\033\171\036\170\037\166\040\164\041\162\042\141\043" +
    "\140\045\136\046\156\047\135\050\151\051\144\052\142" +
    "\001\002\000\010\005\uffeb\010\uffeb\025\uffeb\001\002\000" +
    "\032\005\uffd3\010\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\022\uffd3\023\uffd3\025\uffd3\034\uffd3\044\uffd3\001" +
    "\002\000\004\025\277\001\002\000\032\005\uffd4\010\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\022\uffd4\023" +
    "\uffd4\025\uffd4\034\uffd4\044\uffd4\001\002\000\052\004\165" +
    "\011\160\012\157\020\155\024\147\027\145\032\172\033" +
    "\171\036\170\037\166\040\164\041\162\042\141\043\140" +
    "\045\136\046\156\047\135\050\151\051\144\052\142\001" +
    "\002\000\004\005\302\001\002\000\026\005\ufff0\010\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\022\ufff0\023\ufff0\025" +
    "\ufff0\044\ufff0\001\002\000\004\004\304\001\002\000\052" +
    "\004\165\011\160\012\157\020\155\024\147\027\145\032" +
    "\172\033\171\036\170\037\166\040\164\041\162\042\141" +
    "\043\140\045\136\046\156\047\135\050\151\051\144\052" +
    "\142\001\002\000\004\005\306\001\002\000\026\005\ufff8" +
    "\010\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\022\ufff8\023" +
    "\ufff8\025\ufff8\044\ufff8\001\002\000\024\020\022\024\020" +
    "\026\016\032\015\043\011\045\021\047\023\050\024\052" +
    "\025\001\002\000\004\015\311\001\002\000\024\020\022" +
    "\024\020\026\016\032\015\043\011\045\021\047\023\050" +
    "\024\052\025\001\002\000\004\005\313\001\002\000\004" +
    "\007\314\001\002\000\052\004\165\011\160\012\157\020" +
    "\155\024\147\027\145\032\172\033\171\036\170\037\166" +
    "\040\164\041\162\042\141\043\140\045\136\046\156\047" +
    "\135\050\151\051\144\052\142\001\002\000\006\010\316" +
    "\016\206\001\002\000\026\005\ufff5\010\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\022\ufff5\023\ufff5\025\ufff5\044\ufff5" +
    "\001\002\000\026\005\uffb6\020\022\024\020\026\016\032" +
    "\015\043\011\045\021\047\023\050\024\052\025\001\002" +
    "\000\004\005\uffb4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\011\036\012\037\016\044\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\026\027\030\033\031\034\032\035\033\036\034\046" +
    "\035\127\036\032\044\042\001\001\000\002\001\001\000" +
    "\012\026\124\030\033\031\126\044\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\026" +
    "\027\030\033\031\034\032\035\033\036\034\046\035\026" +
    "\036\032\044\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\011\036\113\044\013\001\001" +
    "\000\010\026\011\036\112\044\013\001\001\000\022\026" +
    "\027\030\033\031\034\032\035\033\036\034\110\036\032" +
    "\044\042\001\001\000\002\001\001\000\006\026\103\027" +
    "\101\001\001\000\022\026\027\030\033\031\034\032\035" +
    "\033\036\034\067\036\032\044\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\026\027\030\033\031\034" +
    "\032\035\033\052\036\032\044\042\001\001\000\024\026" +
    "\027\030\033\031\034\032\035\033\036\034\046\035\051" +
    "\036\032\044\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\026\011\036\054\040\055\041\056\044\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\026\027\030\033\031\034" +
    "\032\035\033\036\034\061\036\032\044\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\026\011\036\054" +
    "\040\055\041\064\044\013\001\001\000\002\001\001\000" +
    "\010\026\011\036\066\044\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\026\027\030\033\031\034\032" +
    "\035\033\036\034\072\036\032\042\071\043\073\044\042" +
    "\001\001\000\026\026\027\030\033\031\034\032\035\033" +
    "\036\034\072\036\032\042\071\043\100\044\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\026\027\030\033\031\034\032\035\033\036\034\076" +
    "\036\032\044\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\103\027\105\001\001\000" +
    "\002\001\001\000\020\026\027\030\033\031\034\032\035" +
    "\033\107\036\032\044\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\026\027\030\033\031" +
    "\034\032\035\033\036\034\046\035\116\036\032\044\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\026" +
    "\027\030\033\031\034\032\035\033\036\034\046\035\121" +
    "\036\032\044\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\145\004\147" +
    "\005\151\006\153\007\166\011\142\020\172\021\152\022" +
    "\162\023\173\024\160\025\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\145\004\147\005\151\006\153\007\271\010\275\011\142" +
    "\020\172\021\152\022\162\023\173\024\160\025\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\145\004" +
    "\266\020\172\021\152\022\162\023\173\024\160\025\136" +
    "\001\001\000\002\001\001\000\004\011\264\001\001\000" +
    "\004\011\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\145\004" +
    "\147\005\151\006\153\007\236\011\142\020\172\021\152" +
    "\022\162\023\173\024\160\025\136\001\001\000\004\046" +
    "\230\001\001\000\002\001\001\000\032\003\145\004\147" +
    "\005\151\006\153\007\215\011\142\020\172\021\152\022" +
    "\162\023\173\024\160\025\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\177\013\176\026\011\036\175\044\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\177\013\201\026\011\036\175\044\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\145\004" +
    "\147\005\151\006\153\007\204\011\142\020\172\021\152" +
    "\022\162\023\173\024\160\025\136\001\001\000\002\001" +
    "\001\000\030\003\145\004\147\005\151\006\207\011\142" +
    "\020\172\021\152\022\162\023\173\024\160\025\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\145\004\147\005\151\006\153\007\214\011\142\020\172" +
    "\021\152\022\162\023\173\024\160\025\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\217\015\220" +
    "\026\027\030\033\031\034\032\035\033\036\034\221\036" +
    "\032\044\042\001\001\000\026\014\217\015\226\026\027" +
    "\030\033\031\034\032\035\033\036\034\221\036\032\044" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\145\004\147\005\151\006\153\007" +
    "\224\011\142\020\172\021\152\022\162\023\173\024\160" +
    "\025\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\233\001\001\000\002\001\001\000" +
    "\030\003\145\004\147\005\151\006\235\011\142\020\172" +
    "\021\152\022\162\023\173\024\160\025\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\243\017\241\001\001\000\002\001\001\000\014\012" +
    "\177\013\245\026\011\036\175\044\013\001\001\000\006" +
    "\016\243\017\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\145\004\147\005\151" +
    "\006\153\007\250\011\142\020\172\021\152\022\162\023" +
    "\173\024\160\025\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\254\026\011\036" +
    "\175\044\013\001\001\000\002\001\001\000\012\012\256" +
    "\026\011\036\175\044\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\145\004\147\005\151\006\153" +
    "\007\261\011\142\020\172\021\152\022\162\023\173\024" +
    "\160\025\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\145\004\147\005\151\006\153" +
    "\007\271\010\270\011\142\020\172\021\152\022\162\023" +
    "\173\024\160\025\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\145\004\147\005\151\006\153\007" +
    "\271\010\273\011\142\020\172\021\152\022\162\023\173" +
    "\024\160\025\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\145" +
    "\004\147\005\151\006\153\007\271\010\300\011\142\020" +
    "\172\021\152\022\162\023\173\024\160\025\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\145\004\147\005\151\006\153\007\271\010\304" +
    "\011\142\020\172\021\152\022\162\023\173\024\160\025" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\307\026\011\036\175\044\013\001\001\000\002\001" +
    "\001\000\012\012\311\026\011\036\175\044\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\145\004" +
    "\147\005\151\006\153\007\314\011\142\020\172\021\152" +
    "\022\162\023\173\024\160\025\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\011\036\012\037\317" +
    "\044\013\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public coop.rchain.syntax.rholang.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (coop.rchain.syntax.rholang.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ListName ::= Name _SYMB_11 ListName 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListName p_3 = (coop.rchain.syntax.rholang.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ListName ::= Name 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ListVar ::= Var _SYMB_11 ListVar 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVar p_3 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ListVar ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVar(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ListValPattern ::= ValPattern _SYMB_11 ListValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListValPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ListValPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListValPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ValPattern ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ValPattern ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtDbl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ValPattern ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ValPattern ::= _SYMB_22 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ValPattern ::= _SYMB_31 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ValPattern ::= _SYMB_16 ListPPattern _SYMB_17 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ValPattern ::= Var _SYMB_3 ListPPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStruct(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListPatternPatternMatch ::= PatternPatternMatch ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListPatternPatternMatch ::= PatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PatternPatternMatch ::= PPattern _SYMB_15 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBranch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternPatternMatch",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListPatternBind ::= PatternBind _SYMB_14 ListPatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ListPatternBind ::= PatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PatternBind ::= CPattern _SYMB_13 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.CPattern p_3 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternBind",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ListCPattern ::= CPattern _SYMB_11 ListCPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListCPattern ::= CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListCPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CValPtrn(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CPattern ::= _SYMB_12 PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListPPattern ::= PPattern _SYMB_11 ListPPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListPPattern ::= PPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListPPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PPattern ::= PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PPattern ::= PPattern _SYMB_10 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_3 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PPattern1 ::= PPattern2 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PPattern1 ::= Name _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PPattern1 ::= _SYMB_27 ListVarPattern _SYMB_25 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PPattern1 ::= _SYMB_26 PPattern _SYMB_32 ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PPattern1 ::= _SYMB_23 _SYMB_0 ListPatternBind _SYMB_1 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_6 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PPattern2 ::= PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PPattern2 ::= CPattern _SYMB_7 _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtOutput(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PPattern3 ::= PPattern4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PPattern3 ::= _SYMB_6 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PPattern3 ::= _SYMB_5 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PPattern4 ::= _SYMB_0 PPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PPattern4 ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PPattern4 ::= _SYMB_19 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PPattern4 ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListVarPattern ::= VarPattern _SYMB_11 ListVarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListVarPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListVarPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VarPattern ::= _SYMB_18 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtWild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VarPattern ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Collect ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.Collect RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Collect",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Struct ::= Var _SYMB_3 ListProc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Struct RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.StructConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Struct",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Entity ::= _SYMB_16 ListProc _SYMB_17 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListProc p_2 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ETuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Entity ::= Collect 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Collect p_1 = (coop.rchain.syntax.rholang.Absyn.Collect)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ECollect(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Entity ::= Struct 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Struct p_1 = (coop.rchain.syntax.rholang.Absyn.Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EStruct(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Entity ::= _CHAR_ 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EChar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RhoBool ::= _SYMB_22 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RhoBool ::= _SYMB_31 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Quantity ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Quantity ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Quantity ::= RhoBool 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.RhoBool p_1 = (coop.rchain.syntax.rholang.Absyn.RhoBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QBool(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Value ::= Entity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Entity p_1 = (coop.rchain.syntax.rholang.Absyn.Entity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VEnt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Value ::= Quantity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VQuant(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListCBranch ::= CBranch ListCBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListCBranch ::= CBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CBranch ::= _SYMB_20 ListBind _SYMB_15 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.CBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_2 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.Choice(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CBranch",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListPMBranch ::= PMBranch ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListPMBranch ::= PMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPMBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PMBranch ::= PPattern _SYMB_15 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PatternMatch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PMBranch",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListBind ::= Bind _SYMB_14 ListBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListBind ::= Bind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bind ::= CPattern _SYMB_13 Chan _SYMB_24 Proc 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CondInputBind(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bind ::= CPattern _SYMB_13 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.InputBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Chan ::= _SYMB_12 Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Chan ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListProc ::= Proc _SYMB_11 ListProc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListProc ::= Proc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListProc(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Proc ::= Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Proc ::= Proc _SYMB_10 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_3 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc1 ::= Proc2 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc1 ::= Name _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc1 ::= _SYMB_27 ListVar _SYMB_25 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVar p_2 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc1 ::= _SYMB_26 Proc _SYMB_32 ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Proc1 ::= _SYMB_28 _SYMB_3 ListCBranch _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_3 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PChoice(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Proc1 ::= _SYMB_23 _SYMB_0 ListBind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_6 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Proc1 ::= _SYMB_30 _SYMB_0 Bind _SYMB_9 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_3 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_5 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldR(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Proc1 ::= _SYMB_29 _SYMB_0 Bind _SYMB_8 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_3 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_5 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldL(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Proc2 ::= Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Proc2 ::= Chan _SYMB_7 _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_1 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_4 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PLift(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Proc3 ::= Proc4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Proc3 ::= _SYMB_6 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Proc3 ::= _SYMB_5 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Proc4 ::= _SYMB_0 Proc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Proc4 ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Proc4 ::= Value 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Value p_1 = (coop.rchain.syntax.rholang.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PValue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Proc4 ::= _SYMB_19 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Contr ::= _SYMB_21 Name _SYMB_0 ListCPattern _SYMB_1 _SYMB_2 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Contr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.DContr(p_2,p_4,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Contr EOF 
            {
              Object RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Contr start_val = (coop.rchain.syntax.rholang.Absyn.Contr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

