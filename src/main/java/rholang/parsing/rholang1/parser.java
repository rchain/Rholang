
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 30 17:07:15 CEST 2016
//----------------------------------------------------

package rholang.parsing.rholang1;


/** CUP v0.10k generated parser.
  * @version Thu Jun 30 17:07:15 CEST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\003\013\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\005" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\006\007\000\002\006\003\000\002" +
    "\007\011\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\003\000\002\010\005" +
    "\000\002\010\003\000\002\011\002\000\002\011\003\000" +
    "\002\011\005\000\002\012\005\000\002\013\003\000\002" +
    "\013\005\000\002\014\007\000\002\015\003\000\002\015" +
    "\004\000\002\016\010\000\002\017\003\000\002\017\004" +
    "\000\002\020\003\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\006\000\002\024\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\002\000\002\026\003" +
    "\000\002\026\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\005\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\030\003\000\002\031" +
    "\007\000\002\031\003\000\002\032\011\000\002\032\006" +
    "\000\002\032\006\000\002\032\006\000\002\032\003\000" +
    "\002\033\005\000\002\033\003\000\002\034\002\000\002" +
    "\034\003\000\002\034\005\000\002\035\005\000\002\036" +
    "\003\000\002\036\005\000\002\037\007\000\002\040\003" +
    "\000\002\040\004\000\002\041\006\000\002\042\003\000" +
    "\002\042\005\000\002\043\003\000\002\043\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\025\004\001\002\000\004\040\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\032\004\027\005\uffc2\011" +
    "\026\012\024\013\022\022\017\023\015\026\014\030\032" +
    "\031\031\040\013\041\012\001\002\000\024\005\uffd2\010" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\033\uffd2\001\002\000\026\005\uffd8\007\241\010\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\033\uffd8" +
    "\001\002\000\004\004\236\001\002\000\004\004\222\001" +
    "\002\000\024\005\uffd3\010\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\033\uffd3\001\002\000\012\005" +
    "\uffc1\010\uffc1\015\076\016\220\001\002\000\026\005\uffd7" +
    "\010\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\027\uffd7\033\uffd7\001\002\000\024\005\uffcc\010\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\033" +
    "\uffcc\001\002\000\024\005\uffca\010\uffca\014\214\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\033\uffca\001\002\000" +
    "\020\004\027\011\026\012\024\013\022\022\017\023\015" +
    "\041\012\001\002\000\022\005\uffc5\010\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\033\uffc5\001\002\000\020" +
    "\004\027\011\026\012\024\013\022\022\017\023\015\041" +
    "\012\001\002\000\022\005\uffc3\010\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\033\uffc3\001\002\000\020\004" +
    "\027\011\026\012\024\013\022\022\017\023\015\041\012" +
    "\001\002\000\030\004\027\011\026\012\024\013\022\022" +
    "\017\023\015\026\014\030\032\031\031\040\013\041\012" +
    "\001\002\000\024\005\uffd1\010\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\033\uffd1\001\002\000\010" +
    "\022\017\027\uffd6\041\202\001\002\000\030\004\027\011" +
    "\026\012\024\013\022\022\017\023\015\026\014\030\032" +
    "\031\031\040\013\041\012\001\002\000\004\005\034\001" +
    "\002\000\004\006\035\001\002\000\004\007\036\001\002" +
    "\000\040\004\062\011\060\012\057\013\055\023\051\026" +
    "\050\030\065\031\064\032\063\034\040\035\056\036\037" +
    "\037\054\040\047\041\046\001\002\000\022\005\uffdf\010" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf\033\uffdf" +
    "\001\002\000\022\005\uffd9\010\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\020\uffd9\021\uffd9\033\uffd9\001\002\000\022\005\uffdb" +
    "\010\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb\033" +
    "\uffdb\001\002\000\022\005\ufff8\010\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\020\ufff8\021\ufff8\033\ufff8\001\002\000\022\005" +
    "\ufff6\010\ufff6\014\162\015\ufff6\016\ufff6\020\ufff6\021\ufff6" +
    "\033\ufff6\001\002\000\020\005\ufff0\010\ufff0\015\ufff0\016" +
    "\ufff0\020\ufff0\021\ufff0\033\ufff0\001\002\000\020\005\uffee" +
    "\010\uffee\015\uffee\016\uffee\020\uffee\021\uffee\033\uffee\001" +
    "\002\000\024\005\ufffd\007\157\010\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\020\ufffd\021\ufffd\033\ufffd\001\002\000\004\004" +
    "\151\001\002\000\004\004\143\001\002\000\022\005\uffff" +
    "\010\uffff\014\uffff\015\uffff\016\uffff\020\uffff\021\uffff\033" +
    "\uffff\001\002\000\006\010\142\015\071\001\002\000\022" +
    "\005\uffe1\010\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021" +
    "\uffe1\033\uffe1\001\002\000\022\005\uffde\010\uffde\014\uffde" +
    "\015\uffde\016\uffde\020\uffde\021\uffde\033\uffde\001\002\000" +
    "\026\004\062\011\060\012\057\013\055\023\051\034\040" +
    "\035\056\036\037\037\054\041\046\001\002\000\022\005" +
    "\uffdd\010\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\021\uffdd" +
    "\033\uffdd\001\002\000\026\004\062\011\060\012\057\013" +
    "\055\023\051\034\040\035\056\036\037\037\054\041\046" +
    "\001\002\000\026\004\062\011\060\012\057\013\055\023" +
    "\051\034\040\035\056\036\037\037\054\041\046\001\002" +
    "\000\022\005\uffdc\010\uffdc\014\uffdc\015\uffdc\016\uffdc\020" +
    "\uffdc\021\uffdc\033\uffdc\001\002\000\040\004\062\011\060" +
    "\012\057\013\055\023\051\026\050\030\065\031\064\032" +
    "\063\034\040\035\056\036\037\037\054\040\047\041\046" +
    "\001\002\000\004\007\114\001\002\000\004\041\107\001" +
    "\002\000\040\004\062\011\060\012\057\013\055\023\051" +
    "\026\050\030\065\031\064\032\063\034\040\035\056\036" +
    "\037\037\054\040\047\041\046\001\002\000\022\005\ufffe" +
    "\010\ufffe\014\ufffe\015\ufffe\016\ufffe\020\ufffe\021\ufffe\033" +
    "\ufffe\001\002\000\022\005\uffe0\010\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\020\uffe0\021\uffe0\033\uffe0\001\002\000\006\015" +
    "\071\033\072\001\002\000\040\004\062\011\060\012\057" +
    "\013\055\023\051\026\050\030\065\031\064\032\063\034" +
    "\040\035\056\036\037\037\054\040\047\041\046\001\002" +
    "\000\030\004\027\011\026\012\024\013\022\022\017\023" +
    "\015\026\014\030\032\031\031\040\013\041\012\001\002" +
    "\000\046\004\027\005\uffe6\010\uffe6\011\026\012\024\013" +
    "\022\015\uffe6\016\uffe6\020\uffe6\021\uffe6\022\017\023\015" +
    "\026\014\030\032\031\031\033\uffe6\040\013\041\012\001" +
    "\002\000\006\015\076\021\077\001\002\000\020\005\ufff3" +
    "\010\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\033\ufff3\001" +
    "\002\000\030\004\027\011\026\012\024\013\022\022\017" +
    "\023\015\026\014\030\032\031\031\040\013\041\012\001" +
    "\002\000\004\007\100\001\002\000\040\004\062\011\060" +
    "\012\057\013\055\023\051\026\050\030\065\031\064\032" +
    "\063\034\040\035\056\036\037\037\054\040\047\041\046" +
    "\001\002\000\006\010\102\015\071\001\002\000\046\004" +
    "\uffe7\005\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7" +
    "\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\026\uffe7\030" +
    "\uffe7\031\uffe7\033\uffe7\040\uffe7\041\uffe7\001\002\000\022" +
    "\005\uffc4\010\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\033\uffc4\001\002\000\020\005\uffe5\010\uffe5\015\uffe5" +
    "\016\uffe5\020\uffe5\021\uffe5\033\uffe5\001\002\000\020\005" +
    "\uffef\010\uffef\015\uffef\016\uffef\020\uffef\021\uffef\033\uffef" +
    "\001\002\000\004\027\112\001\002\000\006\016\110\027" +
    "\uffb8\001\002\000\004\041\107\001\002\000\004\027\uffb7" +
    "\001\002\000\040\004\062\011\060\012\057\013\055\023" +
    "\051\026\050\030\065\031\064\032\063\034\040\035\056" +
    "\036\037\037\054\040\047\041\046\001\002\000\020\005" +
    "\ufff2\010\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\033\ufff2" +
    "\001\002\000\004\024\116\001\002\000\004\010\134\001" +
    "\002\000\030\004\027\011\026\012\024\013\022\022\017" +
    "\023\015\026\014\030\032\031\031\040\013\041\012\001" +
    "\002\000\006\010\uffe3\024\116\001\002\000\004\010\uffe2" +
    "\001\002\000\010\005\uffe9\020\132\021\uffe9\001\002\000" +
    "\006\015\076\017\130\001\002\000\004\021\124\001\002" +
    "\000\004\007\125\001\002\000\040\004\062\011\060\012" +
    "\057\013\055\023\051\026\050\030\065\031\064\032\063" +
    "\034\040\035\056\036\037\037\054\040\047\041\046\001" +
    "\002\000\006\010\127\015\071\001\002\000\006\010\uffe4" +
    "\024\uffe4\001\002\000\040\004\062\011\060\012\057\013" +
    "\055\023\051\026\050\030\065\031\064\032\063\034\040" +
    "\035\056\036\037\037\054\040\047\041\046\001\002\000" +
    "\012\005\uffea\015\071\020\uffea\021\uffea\001\002\000\030" +
    "\004\027\011\026\012\024\013\022\022\017\023\015\026" +
    "\014\030\032\031\031\040\013\041\012\001\002\000\006" +
    "\005\uffe8\021\uffe8\001\002\000\020\005\ufff4\010\ufff4\015" +
    "\ufff4\016\ufff4\020\ufff4\021\ufff4\033\ufff4\001\002\000\006" +
    "\005\136\015\071\001\002\000\022\005\ufffc\010\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\020\ufffc\021\ufffc\033\ufffc\001\002" +
    "\000\022\005\ufffb\010\ufffb\014\ufffb\015\ufffb\016\ufffb\020" +
    "\ufffb\021\ufffb\033\ufffb\001\002\000\022\005\ufffa\010\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\020\ufffa\021\ufffa\033\ufffa\001" +
    "\002\000\022\005\ufff9\010\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\020\ufff9\021\ufff9\033\ufff9\001\002\000\004\002\000\001" +
    "\002\000\030\004\027\011\026\012\024\013\022\022\017" +
    "\023\015\026\014\030\032\031\031\040\013\041\012\001" +
    "\002\000\004\005\145\001\002\000\004\007\146\001\002" +
    "\000\040\004\062\011\060\012\057\013\055\023\051\026" +
    "\050\030\065\031\064\032\063\034\040\035\056\036\037" +
    "\037\054\040\047\041\046\001\002\000\006\010\150\015" +
    "\071\001\002\000\020\005\ufff5\010\ufff5\015\ufff5\016\ufff5" +
    "\020\ufff5\021\ufff5\033\ufff5\001\002\000\042\004\062\005" +
    "\uffed\011\060\012\057\013\055\023\051\026\050\030\065" +
    "\031\064\032\063\034\040\035\056\036\037\037\054\040" +
    "\047\041\046\001\002\000\012\005\uffec\010\uffec\015\071" +
    "\016\155\001\002\000\004\005\154\001\002\000\020\005" +
    "\ufff1\010\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\033\ufff1" +
    "\001\002\000\044\004\062\005\uffed\010\uffed\011\060\012" +
    "\057\013\055\023\051\026\050\030\065\031\064\032\063" +
    "\034\040\035\056\036\037\037\054\040\047\041\046\001" +
    "\002\000\006\005\uffeb\010\uffeb\001\002\000\042\004\062" +
    "\010\uffed\011\060\012\057\013\055\023\051\026\050\030" +
    "\065\031\064\032\063\034\040\035\056\036\037\037\054" +
    "\040\047\041\046\001\002\000\004\010\161\001\002\000" +
    "\022\005\uffda\010\uffda\014\uffda\015\uffda\016\uffda\020\uffda" +
    "\021\uffda\033\uffda\001\002\000\004\004\163\001\002\000" +
    "\042\004\062\005\uffed\011\060\012\057\013\055\023\051" +
    "\026\050\030\065\031\064\032\063\034\040\035\056\036" +
    "\037\037\054\040\047\041\046\001\002\000\004\005\165" +
    "\001\002\000\020\005\ufff7\010\ufff7\015\ufff7\016\ufff7\020" +
    "\ufff7\021\ufff7\033\ufff7\001\002\000\006\015\076\033\167" +
    "\001\002\000\030\004\027\011\026\012\024\013\022\022" +
    "\017\023\015\026\014\030\032\031\031\040\013\041\012" +
    "\001\002\000\050\004\027\005\uffbb\010\uffbb\011\026\012" +
    "\024\013\022\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\017\023\015\026\014\030\032\031\031\033\uffbb\040" +
    "\013\041\012\001\002\000\006\015\076\021\173\001\002" +
    "\000\022\005\uffc8\010\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\033\uffc8\001\002\000\004\007\174\001\002" +
    "\000\030\004\027\011\026\012\024\013\022\022\017\023" +
    "\015\026\014\030\032\031\031\040\013\041\012\001\002" +
    "\000\006\010\176\015\076\001\002\000\050\004\uffbc\005" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\026\uffbc\030" +
    "\uffbc\031\uffbc\033\uffbc\040\uffbc\041\uffbc\001\002\000\022" +
    "\005\uffba\010\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\033\uffba\001\002\000\004\027\205\001\002\000\006" +
    "\016\203\027\uffd5\001\002\000\006\016\uffd8\027\uffd8\001" +
    "\002\000\010\022\017\027\uffd6\041\202\001\002\000\004" +
    "\027\uffd4\001\002\000\030\004\027\011\026\012\024\013" +
    "\022\022\017\023\015\026\014\030\032\031\031\040\013" +
    "\041\012\001\002\000\022\005\uffc7\010\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\033\uffc7\001\002\000\006" +
    "\005\210\015\076\001\002\000\024\005\uffd0\010\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\033\uffd0" +
    "\001\002\000\024\005\uffcf\010\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\033\uffcf\001\002\000\024" +
    "\005\uffcd\010\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\033\uffcd\001\002\000\024\005\uffce\010\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\033" +
    "\uffce\001\002\000\004\004\215\001\002\000\032\004\027" +
    "\005\uffc2\011\026\012\024\013\022\022\017\023\015\026" +
    "\014\030\032\031\031\040\013\041\012\001\002\000\004" +
    "\005\217\001\002\000\022\005\uffcb\010\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\033\uffcb\001\002\000\034" +
    "\004\027\005\uffc2\010\uffc2\011\026\012\024\013\022\022" +
    "\017\023\015\026\014\030\032\031\031\040\013\041\012" +
    "\001\002\000\006\005\uffc0\010\uffc0\001\002\000\030\004" +
    "\027\011\026\012\024\013\022\022\017\023\015\026\014" +
    "\030\032\031\031\040\013\041\012\001\002\000\006\015" +
    "\076\017\234\001\002\000\004\005\230\001\002\000\006" +
    "\005\uffbe\020\226\001\002\000\030\004\027\011\026\012" +
    "\024\013\022\022\017\023\015\026\014\030\032\031\031" +
    "\040\013\041\012\001\002\000\004\005\uffbd\001\002\000" +
    "\004\007\231\001\002\000\030\004\027\011\026\012\024" +
    "\013\022\022\017\023\015\026\014\030\032\031\031\040" +
    "\013\041\012\001\002\000\006\010\233\015\076\001\002" +
    "\000\022\005\uffc9\010\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\033\uffc9\001\002\000\030\004\027\011\026" +
    "\012\024\013\022\022\017\023\015\026\014\030\032\031" +
    "\031\040\013\041\012\001\002\000\010\005\uffbf\015\076" +
    "\020\uffbf\001\002\000\032\004\027\005\uffc2\011\026\012" +
    "\024\013\022\022\017\023\015\026\014\030\032\031\031" +
    "\040\013\041\012\001\002\000\004\005\240\001\002\000" +
    "\022\005\uffc6\010\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\033\uffc6\001\002\000\032\004\027\010\uffc2\011" +
    "\026\012\024\013\022\022\017\023\015\026\014\030\032" +
    "\031\031\040\013\041\012\001\002\000\004\010\243\001" +
    "\002\000\024\005\uffb9\010\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\033\uffb9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\025\010\027\017\030\020\031\022\032\024\033\015\034" +
    "\032\041\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\010\027\017\030\212\041\027\001" +
    "\001\000\002\001\001\000\012\025\010\027\017\030\211" +
    "\041\027\001\001\000\002\001\001\000\012\025\010\027" +
    "\017\030\210\041\027\001\001\000\020\025\010\027\017" +
    "\030\020\031\022\032\024\033\206\041\027\001\001\000" +
    "\002\001\001\000\006\025\200\026\177\001\001\000\020" +
    "\025\010\027\017\030\020\031\022\032\024\033\165\041" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\041\005\042\006\043\007\044\010" +
    "\051\020\065\021\052\022\066\023\060\024\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\041\005\140\020\065\021" +
    "\052\022\066\023\060\024\040\001\001\000\002\001\001" +
    "\000\020\004\041\005\137\020\065\021\052\022\066\023" +
    "\060\024\040\001\001\000\020\004\041\005\136\020\065" +
    "\021\052\022\066\023\060\024\040\001\001\000\002\001" +
    "\001\000\026\004\041\005\042\006\043\007\044\010\134" +
    "\020\065\021\052\022\066\023\060\024\040\001\001\000" +
    "\002\001\001\000\004\042\105\001\001\000\026\004\041" +
    "\005\042\006\043\007\044\010\067\020\065\021\052\022" +
    "\066\023\060\024\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\041\005\042\006" +
    "\043\007\104\020\065\021\052\022\066\023\060\024\040" +
    "\001\001\000\024\014\072\015\074\025\010\027\017\030" +
    "\020\031\022\032\024\033\073\041\027\001\001\000\024" +
    "\014\072\015\103\025\010\027\017\030\020\031\022\032" +
    "\024\033\073\041\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\025\010\027\017\030\020\031\022\032" +
    "\102\041\027\001\001\000\002\001\001\000\026\004\041" +
    "\005\042\006\043\007\044\010\100\020\065\021\052\022" +
    "\066\023\060\024\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\110" +
    "\001\001\000\002\001\001\000\024\004\041\005\042\006" +
    "\043\007\112\020\065\021\052\022\066\023\060\024\040" +
    "\001\001\000\002\001\001\000\006\016\116\017\114\001" +
    "\001\000\002\001\001\000\024\012\120\013\122\025\010" +
    "\027\017\030\020\031\022\032\024\033\121\041\027\001" +
    "\001\000\006\016\116\017\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\041\005\042\006\043\007\044" +
    "\010\125\020\065\021\052\022\066\023\060\024\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\041" +
    "\005\042\006\043\007\044\010\130\020\065\021\052\022" +
    "\066\023\060\024\040\001\001\000\002\001\001\000\024" +
    "\012\120\013\132\025\010\027\017\030\020\031\022\032" +
    "\024\033\121\041\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\012\120\013\143\025\010\027\017\030\020\031" +
    "\022\032\024\033\121\041\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\041\005\042\006\043\007" +
    "\044\010\146\020\065\021\052\022\066\023\060\024\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\041\005\042\006\043\007\044\010\151\011\152\020\065" +
    "\021\052\022\066\023\060\024\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\041" +
    "\005\042\006\043\007\044\010\151\011\155\020\065\021" +
    "\052\022\066\023\060\024\040\001\001\000\002\001\001" +
    "\000\030\004\041\005\042\006\043\007\044\010\151\011" +
    "\157\020\065\021\052\022\066\023\060\024\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\041\005\042\006\043\007\044\010\151\011\163" +
    "\020\065\021\052\022\066\023\060\024\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\025\010\027\017\030\020\031\022\032\024\033\170\037" +
    "\167\040\171\041\027\001\001\000\024\025\010\027\017" +
    "\030\020\031\022\032\024\033\170\037\167\040\176\041" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\025\010\027\017\030\020\031\022\032" +
    "\024\033\174\041\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\200\026\203\001\001" +
    "\000\002\001\001\000\016\025\010\027\017\030\020\031" +
    "\022\032\205\041\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\025\010" +
    "\027\017\030\020\031\022\032\024\033\015\034\215\041" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\025\010\027\017\030\020\031\022\032\024\033\015\034" +
    "\220\041\027\001\001\000\002\001\001\000\024\025\010" +
    "\027\017\030\020\031\022\032\024\033\222\035\224\036" +
    "\223\041\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\025\010\027\017\030\020\031" +
    "\022\032\024\033\222\035\224\036\226\041\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\025\010\027" +
    "\017\030\020\031\022\032\024\033\231\041\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\025\010\027" +
    "\017\030\020\031\022\032\024\033\234\041\027\001\001" +
    "\000\002\001\001\000\022\025\010\027\017\030\020\031" +
    "\022\032\024\033\015\034\236\041\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\025\010\027\017\030" +
    "\020\031\022\032\024\033\015\034\241\041\027\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public rholang.parsing.rholang1.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (rholang.parsing.rholang1.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListName ::= Name _SYMB_10 ListName 
            {
              rholang.parsing.rholang1.Absyn.ListName RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.ListName p_3 = (rholang.parsing.rholang1.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*ListName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListName ::= Name 
            {
              rholang.parsing.rholang1.Absyn.ListName RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*ListName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListVar ::= Var _SYMB_10 ListVar 
            {
              rholang.parsing.rholang1.Absyn.ListVar RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.ListVar p_3 = (rholang.parsing.rholang1.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*ListVar*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListVar ::= Var 
            {
              rholang.parsing.rholang1.Absyn.ListVar RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListVar(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*ListVar*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ValPattern ::= Var _SYMB_3 ListPattern _SYMB_4 
            {
              rholang.parsing.rholang1.Absyn.ValPattern RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.rholang1.Absyn.ListPattern p_3 = (rholang.parsing.rholang1.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.VPtStruct(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ValPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListPatternPatternMatch ::= PatternPatternMatch ListPatternPatternMatch 
            {
              rholang.parsing.rholang1.Absyn.ListPatternPatternMatch RESULT = null;
		rholang.parsing.rholang1.Absyn.PatternPatternMatch p_1 = (rholang.parsing.rholang1.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rholang.parsing.rholang1.Absyn.ListPatternPatternMatch p_2 = (rholang.parsing.rholang1.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ListPatternPatternMatch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListPatternPatternMatch ::= PatternPatternMatch 
            {
              rholang.parsing.rholang1.Absyn.ListPatternPatternMatch RESULT = null;
		rholang.parsing.rholang1.Absyn.PatternPatternMatch p_1 = (rholang.parsing.rholang1.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ListPatternPatternMatch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PatternPatternMatch ::= Pattern _SYMB_13 _SYMB_3 Pattern _SYMB_4 
            {
              rholang.parsing.rholang1.Absyn.PatternPatternMatch RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang1.Absyn.Pattern p_4 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtBranch(p_1,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*PatternPatternMatch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListPatternBind ::= PatternBind _SYMB_12 ListPatternBind 
            {
              rholang.parsing.rholang1.Absyn.ListPatternBind RESULT = null;
		rholang.parsing.rholang1.Absyn.PatternBind p_1 = (rholang.parsing.rholang1.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.ListPatternBind p_3 = (rholang.parsing.rholang1.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*ListPatternBind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListPatternBind ::= PatternBind 
            {
              rholang.parsing.rholang1.Absyn.ListPatternBind RESULT = null;
		rholang.parsing.rholang1.Absyn.PatternBind p_1 = (rholang.parsing.rholang1.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListPatternBind(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*ListPatternBind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PatternBind ::= Pattern _SYMB_11 Pattern 
            {
              rholang.parsing.rholang1.Absyn.PatternBind RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.Pattern p_3 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtBind(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*PatternBind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListPattern ::= Pattern _SYMB_10 ListPattern 
            {
              rholang.parsing.rholang1.Absyn.ListPattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.ListPattern p_3 = (rholang.parsing.rholang1.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ListPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListPattern ::= Pattern 
            {
              rholang.parsing.rholang1.Absyn.ListPattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ListPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListPattern ::= 
            {
              rholang.parsing.rholang1.Absyn.ListPattern RESULT = null;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListPattern(); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ListPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Pattern ::= Pattern1 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Pattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Pattern ::= Pattern _SYMB_9 Pattern1 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.Pattern p_3 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtPar(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Pattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Pattern1 ::= Pattern2 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Pattern1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Pattern1 ::= Name _SYMB_0 ListPattern _SYMB_1 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.rholang1.Absyn.ListPattern p_3 = (rholang.parsing.rholang1.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtConstr(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Pattern1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Pattern1 ::= _SYMB_21 ListVarPattern _SYMB_19 Pattern1 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.ListVarPattern p_2 = (rholang.parsing.rholang1.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.Pattern p_4 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtNew(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Pattern1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Pattern1 ::= _SYMB_20 Pattern _SYMB_23 ListPatternPatternMatch 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_2 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.ListPatternPatternMatch p_4 = (rholang.parsing.rholang1.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtMatch(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Pattern1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Pattern1 ::= _SYMB_18 _SYMB_0 ListPatternBind _SYMB_1 _SYMB_3 Pattern _SYMB_4 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.ListPatternBind p_3 = (rholang.parsing.rholang1.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang1.Absyn.Pattern p_6 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtInput(p_3,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Pattern1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Pattern2 ::= Pattern3 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Pattern2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Pattern2 ::= Pattern3 _SYMB_8 _SYMB_0 ListPattern _SYMB_1 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang1.Absyn.ListPattern p_4 = (rholang.parsing.rholang1.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtOutput(p_1,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Pattern2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Pattern3 ::= Pattern4 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Pattern3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Pattern3 ::= _SYMB_6 Pattern3 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_2 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtQuote(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Pattern3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Pattern3 ::= _SYMB_7 Pattern3 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_2 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtInject(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Pattern3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Pattern3 ::= _SYMB_5 Pattern3 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_2 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtDrop(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Pattern3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Pattern4 ::= _SYMB_0 Pattern _SYMB_1 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_2 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Pattern4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Pattern4 ::= ValPattern 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.ValPattern p_1 = (rholang.parsing.rholang1.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtVal(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Pattern4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Pattern4 ::= VarPattern 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		rholang.parsing.rholang1.Absyn.VarPattern p_1 = (rholang.parsing.rholang1.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Pattern4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Pattern4 ::= _SYMB_15 
            {
              rholang.parsing.rholang1.Absyn.Pattern RESULT = null;
		 RESULT = new rholang.parsing.rholang1.Absyn.PtNil(); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Pattern4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListVarPattern ::= VarPattern _SYMB_10 ListVarPattern 
            {
              rholang.parsing.rholang1.Absyn.ListVarPattern RESULT = null;
		rholang.parsing.rholang1.Absyn.VarPattern p_1 = (rholang.parsing.rholang1.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.ListVarPattern p_3 = (rholang.parsing.rholang1.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ListVarPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListVarPattern ::= VarPattern 
            {
              rholang.parsing.rholang1.Absyn.ListVarPattern RESULT = null;
		rholang.parsing.rholang1.Absyn.VarPattern p_1 = (rholang.parsing.rholang1.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListVarPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ListVarPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListVarPattern ::= 
            {
              rholang.parsing.rholang1.Absyn.ListVarPattern RESULT = null;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListVarPattern(); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ListVarPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarPattern ::= _SYMB_14 
            {
              rholang.parsing.rholang1.Absyn.VarPattern RESULT = null;
		 RESULT = new rholang.parsing.rholang1.Absyn.VarPtWild(); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*VarPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarPattern ::= Var 
            {
              rholang.parsing.rholang1.Absyn.VarPattern RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.VarPtVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*VarPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Collect ::= _STRING_ 
            {
              rholang.parsing.rholang1.Absyn.Collect RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.CString(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Collect*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Struct ::= Var _SYMB_3 ListExpr _SYMB_4 
            {
              rholang.parsing.rholang1.Absyn.Struct RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.rholang1.Absyn.ListExpr p_3 = (rholang.parsing.rholang1.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.StructConstr(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Struct*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Entity ::= Collect 
            {
              rholang.parsing.rholang1.Absyn.Entity RESULT = null;
		rholang.parsing.rholang1.Absyn.Collect p_1 = (rholang.parsing.rholang1.Absyn.Collect)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ECollect(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Entity*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Entity ::= Struct 
            {
              rholang.parsing.rholang1.Absyn.Entity RESULT = null;
		rholang.parsing.rholang1.Absyn.Struct p_1 = (rholang.parsing.rholang1.Absyn.Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EStruct(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Entity*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Entity ::= _CHAR_ 
            {
              rholang.parsing.rholang1.Absyn.Entity RESULT = null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EChar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Entity*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Quantity ::= _DOUBLE_ 
            {
              rholang.parsing.rholang1.Absyn.Quantity RESULT = null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.QDouble(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Quantity*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Quantity ::= _INTEGER_ 
            {
              rholang.parsing.rholang1.Absyn.Quantity RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.QInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Quantity*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Value ::= Entity 
            {
              rholang.parsing.rholang1.Absyn.Value RESULT = null;
		rholang.parsing.rholang1.Absyn.Entity p_1 = (rholang.parsing.rholang1.Absyn.Entity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.VEnt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Value*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Value ::= Quantity 
            {
              rholang.parsing.rholang1.Absyn.Value RESULT = null;
		rholang.parsing.rholang1.Absyn.Quantity p_1 = (rholang.parsing.rholang1.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.VQuant(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Value*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListCBranch ::= CBranch ListCBranch 
            {
              rholang.parsing.rholang1.Absyn.ListCBranch RESULT = null;
		rholang.parsing.rholang1.Absyn.CBranch p_1 = (rholang.parsing.rholang1.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rholang.parsing.rholang1.Absyn.ListCBranch p_2 = (rholang.parsing.rholang1.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*ListCBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListCBranch ::= CBranch 
            {
              rholang.parsing.rholang1.Absyn.ListCBranch RESULT = null;
		rholang.parsing.rholang1.Absyn.CBranch p_1 = (rholang.parsing.rholang1.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListCBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*ListCBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CBranch ::= _SYMB_16 ListBind _SYMB_13 _SYMB_3 Expr _SYMB_4 
            {
              rholang.parsing.rholang1.Absyn.CBranch RESULT = null;
		rholang.parsing.rholang1.Absyn.ListBind p_2 = (rholang.parsing.rholang1.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang1.Absyn.Expr p_5 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.Choice(p_2,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*CBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListPMBranch ::= PMBranch ListPMBranch 
            {
              rholang.parsing.rholang1.Absyn.ListPMBranch RESULT = null;
		rholang.parsing.rholang1.Absyn.PMBranch p_1 = (rholang.parsing.rholang1.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rholang.parsing.rholang1.Absyn.ListPMBranch p_2 = (rholang.parsing.rholang1.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ListPMBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListPMBranch ::= PMBranch 
            {
              rholang.parsing.rholang1.Absyn.ListPMBranch RESULT = null;
		rholang.parsing.rholang1.Absyn.PMBranch p_1 = (rholang.parsing.rholang1.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListPMBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ListPMBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PMBranch ::= Pattern _SYMB_13 _SYMB_3 Expr _SYMB_4 
            {
              rholang.parsing.rholang1.Absyn.PMBranch RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang1.Absyn.Expr p_4 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.PatternMatch(p_1,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*PMBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListBind ::= Bind _SYMB_12 ListBind 
            {
              rholang.parsing.rholang1.Absyn.ListBind RESULT = null;
		rholang.parsing.rholang1.Absyn.Bind p_1 = (rholang.parsing.rholang1.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.ListBind p_3 = (rholang.parsing.rholang1.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ListBind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListBind ::= Bind 
            {
              rholang.parsing.rholang1.Absyn.ListBind RESULT = null;
		rholang.parsing.rholang1.Absyn.Bind p_1 = (rholang.parsing.rholang1.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListBind(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ListBind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Bind ::= Pattern _SYMB_11 Expr 
            {
              rholang.parsing.rholang1.Absyn.Bind RESULT = null;
		rholang.parsing.rholang1.Absyn.Pattern p_1 = (rholang.parsing.rholang1.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.Expr p_3 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.InputBind(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Bind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListExpr ::= Expr _SYMB_10 ListExpr 
            {
              rholang.parsing.rholang1.Absyn.ListExpr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_1 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.ListExpr p_3 = (rholang.parsing.rholang1.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ListExpr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListExpr ::= Expr 
            {
              rholang.parsing.rholang1.Absyn.ListExpr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_1 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ListExpr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListExpr ::= 
            {
              rholang.parsing.rholang1.Absyn.ListExpr RESULT = null;
		 RESULT = new rholang.parsing.rholang1.Absyn.ListExpr(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ListExpr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= Expr1 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_1 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= Expr _SYMB_9 Expr1 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_1 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.Expr p_3 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EPar(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr1 ::= Expr2 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_1 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Expr1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr1 ::= Name _SYMB_0 ListExpr _SYMB_1 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.rholang1.Absyn.ListExpr p_3 = (rholang.parsing.rholang1.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EConstr(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Expr1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr1 ::= _SYMB_21 ListVar _SYMB_19 Expr1 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.ListVar p_2 = (rholang.parsing.rholang1.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.Expr p_4 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ENew(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Expr1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr1 ::= _SYMB_20 Expr _SYMB_23 ListPMBranch 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_2 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang1.Absyn.ListPMBranch p_4 = (rholang.parsing.rholang1.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EMatch(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Expr1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr1 ::= _SYMB_22 _SYMB_3 ListCBranch _SYMB_4 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.ListCBranch p_3 = (rholang.parsing.rholang1.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EChoice(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Expr1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr1 ::= _SYMB_18 _SYMB_0 ListBind _SYMB_1 _SYMB_3 Expr _SYMB_4 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.ListBind p_3 = (rholang.parsing.rholang1.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang1.Absyn.Expr p_6 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EInput(p_3,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Expr1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr2 ::= Expr3 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_1 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Expr2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr2 ::= Expr3 _SYMB_8 _SYMB_0 ListExpr _SYMB_1 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_1 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang1.Absyn.ListExpr p_4 = (rholang.parsing.rholang1.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.ELift(p_1,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Expr2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr3 ::= Expr4 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_1 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Expr3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr3 ::= _SYMB_7 Expr3 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_2 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EInject(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Expr3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expr3 ::= _SYMB_6 Expr3 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_2 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EQuote(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Expr3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expr3 ::= _SYMB_5 Expr3 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_2 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EDrop(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Expr3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expr4 ::= _SYMB_0 Expr _SYMB_1 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Expr p_2 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Expr4 ::= Var 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Expr4 ::= Value 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		rholang.parsing.rholang1.Absyn.Value p_1 = (rholang.parsing.rholang1.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.EValue(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Expr4 ::= _SYMB_15 
            {
              rholang.parsing.rholang1.Absyn.Expr RESULT = null;
		 RESULT = new rholang.parsing.rholang1.Absyn.ENil(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Contr ::= _SYMB_17 Name _SYMB_0 ListPattern _SYMB_1 _SYMB_2 _SYMB_3 Expr _SYMB_4 
            {
              rholang.parsing.rholang1.Absyn.Contr RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		rholang.parsing.rholang1.Absyn.ListPattern p_4 = (rholang.parsing.rholang1.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		rholang.parsing.rholang1.Absyn.Expr p_8 = (rholang.parsing.rholang1.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang1.Absyn.DContr(p_2,p_4,p_8); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Contr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Contr EOF 
            {
              Object RESULT = null;
		rholang.parsing.rholang1.Absyn.Contr start_val = (rholang.parsing.rholang1.Absyn.Contr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

