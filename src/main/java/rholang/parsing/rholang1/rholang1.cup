// -*- Java -*- This Cup file was machine-generated by BNFC
package rholang.parsing.rholang1;

parser code {:
  public rholang.parsing.rholang1.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (rholang.parsing.rholang1.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal rholang.parsing.rholang1.Absyn.Contr Contr;
nonterminal rholang.parsing.rholang1.Absyn.Expr Expr4;
nonterminal rholang.parsing.rholang1.Absyn.Expr Expr3;
nonterminal rholang.parsing.rholang1.Absyn.Expr Expr2;
nonterminal rholang.parsing.rholang1.Absyn.Expr Expr1;
nonterminal rholang.parsing.rholang1.Absyn.Expr Expr;
nonterminal rholang.parsing.rholang1.Absyn.ListExpr ListExpr;
nonterminal rholang.parsing.rholang1.Absyn.Bind Bind;
nonterminal rholang.parsing.rholang1.Absyn.ListBind ListBind;
nonterminal rholang.parsing.rholang1.Absyn.PMBranch PMBranch;
nonterminal rholang.parsing.rholang1.Absyn.ListPMBranch ListPMBranch;
nonterminal rholang.parsing.rholang1.Absyn.CBranch CBranch;
nonterminal rholang.parsing.rholang1.Absyn.ListCBranch ListCBranch;
nonterminal rholang.parsing.rholang1.Absyn.Value Value;
nonterminal rholang.parsing.rholang1.Absyn.Quantity Quantity;
nonterminal rholang.parsing.rholang1.Absyn.Entity Entity;
nonterminal rholang.parsing.rholang1.Absyn.Struct Struct;
nonterminal rholang.parsing.rholang1.Absyn.Collect Collect;
nonterminal rholang.parsing.rholang1.Absyn.VarPattern VarPattern;
nonterminal rholang.parsing.rholang1.Absyn.ListVarPattern ListVarPattern;
nonterminal rholang.parsing.rholang1.Absyn.Pattern Pattern4;
nonterminal rholang.parsing.rholang1.Absyn.Pattern Pattern3;
nonterminal rholang.parsing.rholang1.Absyn.Pattern Pattern2;
nonterminal rholang.parsing.rholang1.Absyn.Pattern Pattern1;
nonterminal rholang.parsing.rholang1.Absyn.Pattern Pattern;
nonterminal rholang.parsing.rholang1.Absyn.ListPattern ListPattern;
nonterminal rholang.parsing.rholang1.Absyn.PatternBind PatternBind;
nonterminal rholang.parsing.rholang1.Absyn.ListPatternBind ListPatternBind;
nonterminal rholang.parsing.rholang1.Absyn.PatternPatternMatch PatternPatternMatch;
nonterminal rholang.parsing.rholang1.Absyn.ListPatternPatternMatch ListPatternPatternMatch;
nonterminal rholang.parsing.rholang1.Absyn.ValPattern ValPattern;
nonterminal rholang.parsing.rholang1.Absyn.ListVar ListVar;
nonterminal rholang.parsing.rholang1.Absyn.ListName ListName;

terminal _SYMB_0;    //   (
terminal _SYMB_1;    //   )
terminal _SYMB_2;    //   =
terminal _SYMB_3;    //   {
terminal _SYMB_4;    //   }
terminal _SYMB_5;    //   *
terminal _SYMB_6;    //   @
terminal _SYMB_7;    //   #
terminal _SYMB_8;    //   !
terminal _SYMB_9;    //   |
terminal _SYMB_10;    //   ,
terminal _SYMB_11;    //   <-
terminal _SYMB_12;    //   ;
terminal _SYMB_13;    //   =>
terminal _SYMB_14;    //   _
terminal _SYMB_15;    //   Nil
terminal _SYMB_16;    //   case
terminal _SYMB_17;    //   contract
terminal _SYMB_18;    //   for
terminal _SYMB_19;    //   in
terminal _SYMB_20;    //   match
terminal _SYMB_21;    //   new
terminal _SYMB_22;    //   select
terminal _SYMB_23;    //   with

terminal String _STRING_;
terminal Character _CHAR_;
terminal Integer _INTEGER_;
terminal Double _DOUBLE_;


terminal String Name;
terminal String Var;


start with Contr;


Contr ::= _SYMB_17 Name:p_2 _SYMB_0 ListPattern:p_4 _SYMB_1 _SYMB_2 _SYMB_3 Expr:p_8 _SYMB_4  {: RESULT = new rholang.parsing.rholang1.Absyn.DContr(p_2,p_4,p_8); :} 
;
Expr4 ::= _SYMB_15  {: RESULT = new rholang.parsing.rholang1.Absyn.ENil(); :} 
  | Value:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.EValue(p_1); :}
  | Var:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.EVar(p_1); :}
  | _SYMB_0 Expr:p_2 _SYMB_1  {: RESULT = p_2; :}
;
Expr3 ::= _SYMB_5 Expr3:p_2  {: RESULT = new rholang.parsing.rholang1.Absyn.EDrop(p_2); :} 
  | _SYMB_6 Expr3:p_2  {: RESULT = new rholang.parsing.rholang1.Absyn.EQuote(p_2); :}
  | _SYMB_7 Expr3:p_2  {: RESULT = new rholang.parsing.rholang1.Absyn.EInject(p_2); :}
  | Expr4:p_1  {: RESULT = p_1; :}
;
Expr2 ::= Expr3:p_1 _SYMB_8 _SYMB_0 ListExpr:p_4 _SYMB_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ELift(p_1,p_4); :} 
  | Expr3:p_1  {: RESULT = p_1; :}
;
Expr1 ::= _SYMB_18 _SYMB_0 ListBind:p_3 _SYMB_1 _SYMB_3 Expr:p_6 _SYMB_4  {: RESULT = new rholang.parsing.rholang1.Absyn.EInput(p_3,p_6); :} 
  | _SYMB_22 _SYMB_3 ListCBranch:p_3 _SYMB_4  {: RESULT = new rholang.parsing.rholang1.Absyn.EChoice(p_3); :}
  | _SYMB_20 Expr:p_2 _SYMB_23 ListPMBranch:p_4  {: RESULT = new rholang.parsing.rholang1.Absyn.EMatch(p_2,p_4); :}
  | _SYMB_21 ListVar:p_2 _SYMB_19 Expr1:p_4  {: RESULT = new rholang.parsing.rholang1.Absyn.ENew(p_2,p_4); :}
  | Name:p_1 _SYMB_0 ListExpr:p_3 _SYMB_1  {: RESULT = new rholang.parsing.rholang1.Absyn.EConstr(p_1,p_3); :}
  | Expr2:p_1  {: RESULT = p_1; :}
;
Expr ::= Expr:p_1 _SYMB_9 Expr1:p_3  {: RESULT = new rholang.parsing.rholang1.Absyn.EPar(p_1,p_3); :} 
  | Expr1:p_1  {: RESULT = p_1; :}
;
ListExpr ::=  /* empty */  {: RESULT = new rholang.parsing.rholang1.Absyn.ListExpr(); :} 
  | Expr:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ListExpr(); RESULT.addLast(p_1); :}
  | Expr:p_1 _SYMB_10 ListExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Bind ::= Pattern:p_1 _SYMB_11 Expr:p_3  {: RESULT = new rholang.parsing.rholang1.Absyn.InputBind(p_1,p_3); :} 
;
ListBind ::= Bind:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ListBind(); RESULT.addLast(p_1); :} 
  | Bind:p_1 _SYMB_12 ListBind:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PMBranch ::= Pattern:p_1 _SYMB_13 _SYMB_3 Expr:p_4 _SYMB_4  {: RESULT = new rholang.parsing.rholang1.Absyn.PatternMatch(p_1,p_4); :} 
;
ListPMBranch ::= PMBranch:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ListPMBranch(); RESULT.addLast(p_1); :} 
  | PMBranch:p_1 ListPMBranch:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
CBranch ::= _SYMB_16 ListBind:p_2 _SYMB_13 _SYMB_3 Expr:p_5 _SYMB_4  {: RESULT = new rholang.parsing.rholang1.Absyn.Choice(p_2,p_5); :} 
;
ListCBranch ::= CBranch:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ListCBranch(); RESULT.addLast(p_1); :} 
  | CBranch:p_1 ListCBranch:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
Value ::= Quantity:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.VQuant(p_1); :} 
  | Entity:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.VEnt(p_1); :}
;
Quantity ::= _INTEGER_:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.QInt(p_1); :} 
  | _DOUBLE_:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.QDouble(p_1); :}
;
Entity ::= _CHAR_:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.EChar(p_1); :} 
  | Struct:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.EStruct(p_1); :}
  | Collect:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ECollect(p_1); :}
;
Struct ::= Var:p_1 _SYMB_3 ListExpr:p_3 _SYMB_4  {: RESULT = new rholang.parsing.rholang1.Absyn.StructConstr(p_1,p_3); :} 
;
Collect ::= _STRING_:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.CString(p_1); :} 
;
VarPattern ::= Var:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.VarPtVar(p_1); :} 
  | _SYMB_14  {: RESULT = new rholang.parsing.rholang1.Absyn.VarPtWild(); :}
;
ListVarPattern ::=  /* empty */  {: RESULT = new rholang.parsing.rholang1.Absyn.ListVarPattern(); :} 
  | VarPattern:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ListVarPattern(); RESULT.addLast(p_1); :}
  | VarPattern:p_1 _SYMB_10 ListVarPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Pattern4 ::= _SYMB_15  {: RESULT = new rholang.parsing.rholang1.Absyn.PtNil(); :} 
  | VarPattern:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.PtVar(p_1); :}
  | ValPattern:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.PtVal(p_1); :}
  | _SYMB_0 Pattern:p_2 _SYMB_1  {: RESULT = p_2; :}
;
Pattern3 ::= _SYMB_5 Pattern3:p_2  {: RESULT = new rholang.parsing.rholang1.Absyn.PtDrop(p_2); :} 
  | _SYMB_7 Pattern3:p_2  {: RESULT = new rholang.parsing.rholang1.Absyn.PtInject(p_2); :}
  | _SYMB_6 Pattern3:p_2  {: RESULT = new rholang.parsing.rholang1.Absyn.PtQuote(p_2); :}
  | Pattern4:p_1  {: RESULT = p_1; :}
;
Pattern2 ::= Pattern3:p_1 _SYMB_8 _SYMB_0 ListPattern:p_4 _SYMB_1  {: RESULT = new rholang.parsing.rholang1.Absyn.PtOutput(p_1,p_4); :} 
  | Pattern3:p_1  {: RESULT = p_1; :}
;
Pattern1 ::= _SYMB_18 _SYMB_0 ListPatternBind:p_3 _SYMB_1 _SYMB_3 Pattern:p_6 _SYMB_4  {: RESULT = new rholang.parsing.rholang1.Absyn.PtInput(p_3,p_6); :} 
  | _SYMB_20 Pattern:p_2 _SYMB_23 ListPatternPatternMatch:p_4  {: RESULT = new rholang.parsing.rholang1.Absyn.PtMatch(p_2,p_4); :}
  | _SYMB_21 ListVarPattern:p_2 _SYMB_19 Pattern1:p_4  {: RESULT = new rholang.parsing.rholang1.Absyn.PtNew(p_2,p_4); :}
  | Name:p_1 _SYMB_0 ListPattern:p_3 _SYMB_1  {: RESULT = new rholang.parsing.rholang1.Absyn.PtConstr(p_1,p_3); :}
  | Pattern2:p_1  {: RESULT = p_1; :}
;
Pattern ::= Pattern:p_1 _SYMB_9 Pattern1:p_3  {: RESULT = new rholang.parsing.rholang1.Absyn.PtPar(p_1,p_3); :} 
  | Pattern1:p_1  {: RESULT = p_1; :}
;
ListPattern ::=  /* empty */  {: RESULT = new rholang.parsing.rholang1.Absyn.ListPattern(); :} 
  | Pattern:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ListPattern(); RESULT.addLast(p_1); :}
  | Pattern:p_1 _SYMB_10 ListPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PatternBind ::= Pattern:p_1 _SYMB_11 Pattern:p_3  {: RESULT = new rholang.parsing.rholang1.Absyn.PtBind(p_1,p_3); :} 
;
ListPatternBind ::= PatternBind:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ListPatternBind(); RESULT.addLast(p_1); :} 
  | PatternBind:p_1 _SYMB_12 ListPatternBind:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PatternPatternMatch ::= Pattern:p_1 _SYMB_13 _SYMB_3 Pattern:p_4 _SYMB_4  {: RESULT = new rholang.parsing.rholang1.Absyn.PtBranch(p_1,p_4); :} 
;
ListPatternPatternMatch ::= PatternPatternMatch:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); :} 
  | PatternPatternMatch:p_1 ListPatternPatternMatch:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
ValPattern ::= Var:p_1 _SYMB_3 ListPattern:p_3 _SYMB_4  {: RESULT = new rholang.parsing.rholang1.Absyn.VPtStruct(p_1,p_3); :} 
;
ListVar ::= Var:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ListVar(); RESULT.addLast(p_1); :} 
  | Var:p_1 _SYMB_10 ListVar:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListName ::= Name:p_1  {: RESULT = new rholang.parsing.rholang1.Absyn.ListName(); RESULT.addLast(p_1); :} 
  | Name:p_1 _SYMB_10 ListName:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

