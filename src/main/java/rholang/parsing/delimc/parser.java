
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 30 17:07:14 CEST 2016
//----------------------------------------------------

package rholang.parsing.delimc;


/** CUP v0.10k generated parser.
  * @version Thu Jun 30 17:07:14 CEST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\003\005\000\002\004" +
    "\003\000\002\004\003\000\002\004\010\000\002\004\004" +
    "\000\002\004\004\000\002\004\005\000\002\004\003\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\005\007\000\002\005\011\000\002\006" +
    "\003\000\002\006\003\000\002\007\003\000\002\007\005" +
    "\000\002\010\003\000\002\010\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\003\000\002\012\007\000\002" +
    "\012\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\020\005\006\010\005\015\016\020\012\022" +
    "\011\023\013\025\015\001\002\000\004\004\065\001\002" +
    "\000\020\005\006\010\005\015\016\020\012\022\011\023" +
    "\013\025\015\001\002\000\004\025\027\001\002\000\004" +
    "\004\ufff5\001\002\000\004\004\ufffe\001\002\000\004\004" +
    "\ufff1\001\002\000\020\005\006\010\005\015\016\020\012" +
    "\022\011\023\013\025\015\001\002\000\004\004\ufff2\001" +
    "\002\000\024\002\020\005\006\007\017\010\005\015\016" +
    "\020\012\022\011\023\013\025\015\001\002\000\004\004" +
    "\uffff\001\002\000\004\004\ufff9\001\002\000\020\005\006" +
    "\010\005\015\016\020\012\022\011\023\013\025\015\001" +
    "\002\000\004\002\001\001\002\000\032\004\ufffc\005\006" +
    "\007\017\010\005\015\016\016\024\017\023\020\012\021" +
    "\022\022\011\023\013\025\015\001\002\000\004\004\ufff7" +
    "\001\002\000\004\004\ufff6\001\002\000\004\004\ufff8\001" +
    "\002\000\024\004\ufffa\005\006\007\017\010\005\015\016" +
    "\020\012\022\011\023\013\025\015\001\002\000\024\004" +
    "\ufffb\005\006\007\017\010\005\015\016\020\012\022\011" +
    "\023\013\025\015\001\002\000\004\004\030\001\002\000" +
    "\010\010\032\014\035\024\034\001\002\000\046\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\001\002\000\010\010" +
    "\032\014\035\024\034\001\002\000\004\006\044\001\002" +
    "\000\046\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\001" +
    "\002\000\006\010\032\024\034\001\002\000\046\002\uffed" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\001\002\000\044\002" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\040\015\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\025\uffea\001\002\000\010\010\032" +
    "\014\035\024\034\001\002\000\042\002\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\025" +
    "\uffeb\001\002\000\006\010\032\024\034\001\002\000\042" +
    "\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\025\uffec\001\002\000\020\005\006\010" +
    "\005\015\016\020\012\022\011\023\013\025\015\001\002" +
    "\000\024\004\ufffd\005\006\007\017\010\005\015\016\020" +
    "\012\022\011\023\013\025\015\001\002\000\006\011\050" +
    "\012\047\001\002\000\046\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\001\002\000\010\010\032\014\035\024\034" +
    "\001\002\000\006\011\053\012\052\001\002\000\046\002" +
    "\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\001\002\000\010" +
    "\010\032\014\035\024\034\001\002\000\004\012\055\001" +
    "\002\000\046\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\001\002\000\024\005\006\007\017\010\005\011\057\015" +
    "\016\020\012\022\011\023\013\025\015\001\002\000\020" +
    "\005\006\010\005\015\016\020\012\022\011\023\013\025" +
    "\015\001\002\000\026\005\006\007\017\010\005\011\062" +
    "\012\061\015\016\020\012\022\011\023\013\025\015\001" +
    "\002\000\004\004\ufff4\001\002\000\020\005\006\010\005" +
    "\015\016\020\012\022\011\023\013\025\015\001\002\000" +
    "\024\005\006\007\017\010\005\012\064\015\016\020\012" +
    "\022\011\023\013\025\015\001\002\000\004\004\ufff3\001" +
    "\002\000\010\010\032\014\035\024\034\001\002\000\040" +
    "\002\000\004\000\005\000\007\000\010\000\011\000\012" +
    "\000\015\000\016\000\017\000\020\000\021\000\022\000" +
    "\023\000\025\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\064\000\012\003\013\004\003\005\006\006\007\001" +
    "\001\000\002\001\001\000\012\003\055\004\003\005\006" +
    "\006\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\025\004\003" +
    "\005\006\006\007\001\001\000\002\001\001\000\012\003" +
    "\020\004\003\005\006\006\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\024\004\003\005\006\006" +
    "\007\001\001\000\002\001\001\000\012\003\020\004\003" +
    "\005\006\006\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\020\004\003\005\006" +
    "\006\007\001\001\000\012\003\020\004\003\005\006\006" +
    "\007\001\001\000\002\001\001\000\012\007\035\010\036" +
    "\011\032\012\030\001\001\000\002\001\001\000\012\007" +
    "\035\010\036\011\045\012\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\035\010\041\012\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\035" +
    "\010\036\011\040\012\030\001\001\000\002\001\001\000" +
    "\010\007\035\010\042\012\030\001\001\000\002\001\001" +
    "\000\012\003\044\004\003\005\006\006\007\001\001\000" +
    "\012\003\020\004\003\005\006\006\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\035\010\036\011" +
    "\050\012\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\035\010\036\011\053\012\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\020\004\003" +
    "\005\006\006\007\001\001\000\012\003\057\004\003\005" +
    "\006\006\007\001\001\000\012\003\020\004\003\005\006" +
    "\006\007\001\001\000\002\001\001\000\012\003\062\004" +
    "\003\005\006\006\007\001\001\000\012\003\020\004\003" +
    "\005\006\006\007\001\001\000\002\001\001\000\012\007" +
    "\035\010\036\011\065\012\030\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public rholang.parsing.delimc.Absyn.TypedExpr pTypedExpr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (rholang.parsing.delimc.Absyn.TypedExpr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TType ::= _SYMB_4 Type _SYMB_5 Type _SYMB_5 Type _SYMB_6 
            {
              rholang.parsing.delimc.Absyn.TType RESULT = null;
		rholang.parsing.delimc.Absyn.Type p_2 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		rholang.parsing.delimc.Absyn.Type p_4 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.delimc.Absyn.Type p_6 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.TType3(p_2,p_4,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*TType*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TType ::= _SYMB_4 Type _SYMB_5 Type _SYMB_6 
            {
              rholang.parsing.delimc.Absyn.TType RESULT = null;
		rholang.parsing.delimc.Absyn.Type p_2 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.delimc.Absyn.Type p_4 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.TType2(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*TType*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= Type1 
            {
              rholang.parsing.delimc.Absyn.Type RESULT = null;
		rholang.parsing.delimc.Absyn.Type p_1 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= Type1 _SYMB_7 Type 
            {
              rholang.parsing.delimc.Absyn.Type RESULT = null;
		rholang.parsing.delimc.Absyn.Type p_1 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.delimc.Absyn.Type p_3 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.TFun(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= _SYMB_8 Type1 Type1 
            {
              rholang.parsing.delimc.Absyn.Type RESULT = null;
		rholang.parsing.delimc.Absyn.Type p_2 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rholang.parsing.delimc.Absyn.Type p_3 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.TMonad(p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type1 ::= Type2 
            {
              rholang.parsing.delimc.Absyn.Type RESULT = null;
		rholang.parsing.delimc.Absyn.Type p_1 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type1 ::= TType 
            {
              rholang.parsing.delimc.Absyn.Type RESULT = null;
		rholang.parsing.delimc.Absyn.TType p_1 = (rholang.parsing.delimc.Absyn.TType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.TTuple(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type2 ::= _SYMB_4 Type _SYMB_6 
            {
              rholang.parsing.delimc.Absyn.Type RESULT = null;
		rholang.parsing.delimc.Absyn.Type p_2 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Type2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type2 ::= SimpleType 
            {
              rholang.parsing.delimc.Absyn.Type RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.TSimple(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Type2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Value ::= _STRING_ 
            {
              rholang.parsing.delimc.Absyn.Value RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.VString(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Value*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Value ::= _INTEGER_ 
            {
              rholang.parsing.delimc.Absyn.Value RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.VInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Value*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tuple ::= _SYMB_4 TypedExpr _SYMB_5 TypedExpr _SYMB_5 TypedExpr _SYMB_6 
            {
              rholang.parsing.delimc.Absyn.Tuple RESULT = null;
		rholang.parsing.delimc.Absyn.TypedExpr p_2 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		rholang.parsing.delimc.Absyn.TypedExpr p_4 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.delimc.Absyn.TypedExpr p_6 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.Tuple3(p_2,p_4,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Tuple*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tuple ::= _SYMB_4 TypedExpr _SYMB_5 TypedExpr _SYMB_6 
            {
              rholang.parsing.delimc.Absyn.Tuple RESULT = null;
		rholang.parsing.delimc.Absyn.TypedExpr p_2 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.delimc.Absyn.TypedExpr p_4 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.Tuple2(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Tuple*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= Tuple 
            {
              rholang.parsing.delimc.Absyn.Expr RESULT = null;
		rholang.parsing.delimc.Absyn.Tuple p_1 = (rholang.parsing.delimc.Absyn.Tuple)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.ETuple(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= TypedExpr TypedExpr _SYMB_11 
            {
              rholang.parsing.delimc.Absyn.Expr RESULT = null;
		rholang.parsing.delimc.Absyn.TypedExpr p_1 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.delimc.Absyn.TypedExpr p_2 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.EPushSubCont(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= TypedExpr TypedExpr _SYMB_13 
            {
              rholang.parsing.delimc.Absyn.Expr RESULT = null;
		rholang.parsing.delimc.Absyn.TypedExpr p_1 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.delimc.Absyn.TypedExpr p_2 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.EWithSubCont(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= TypedExpr TypedExpr _SYMB_10 
            {
              rholang.parsing.delimc.Absyn.Expr RESULT = null;
		rholang.parsing.delimc.Absyn.TypedExpr p_1 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.delimc.Absyn.TypedExpr p_2 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.EPushPrompt(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_9 
            {
              rholang.parsing.delimc.Absyn.Expr RESULT = null;
		 RESULT = new rholang.parsing.delimc.Absyn.ENewPrompt(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expr ::= TypedExpr _SYMB_3 TypedExpr 
            {
              rholang.parsing.delimc.Absyn.Expr RESULT = null;
		rholang.parsing.delimc.Absyn.TypedExpr p_1 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.delimc.Absyn.TypedExpr p_3 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.EBind(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expr ::= _SYMB_12 TypedExpr 
            {
              rholang.parsing.delimc.Absyn.Expr RESULT = null;
		rholang.parsing.delimc.Absyn.TypedExpr p_2 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.EReturn(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expr ::= TypedExpr TypedExpr 
            {
              rholang.parsing.delimc.Absyn.Expr RESULT = null;
		rholang.parsing.delimc.Absyn.TypedExpr p_1 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rholang.parsing.delimc.Absyn.TypedExpr p_2 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.EApp(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Expr ::= _SYMB_1 Var _SYMB_0 Type _SYMB_2 TypedExpr 
            {
              rholang.parsing.delimc.Absyn.Expr RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.delimc.Absyn.Type p_4 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.delimc.Absyn.TypedExpr p_6 = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.EAbs(p_2,p_4,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Expr ::= Value 
            {
              rholang.parsing.delimc.Absyn.Expr RESULT = null;
		rholang.parsing.delimc.Absyn.Value p_1 = (rholang.parsing.delimc.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.EVal(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Expr ::= Var 
            {
              rholang.parsing.delimc.Absyn.Expr RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.EVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TypedExpr ::= Expr _SYMB_0 Type 
            {
              rholang.parsing.delimc.Absyn.TypedExpr RESULT = null;
		rholang.parsing.delimc.Absyn.Expr p_1 = (rholang.parsing.delimc.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.delimc.Absyn.Type p_3 = (rholang.parsing.delimc.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.delimc.Absyn.ETyped(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*TypedExpr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= TypedExpr EOF 
            {
              Object RESULT = null;
		rholang.parsing.delimc.Absyn.TypedExpr start_val = (rholang.parsing.delimc.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

