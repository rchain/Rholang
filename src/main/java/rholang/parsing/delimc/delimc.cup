// -*- Java -*- This Cup file was machine-generated by BNFC
package rholang.parsing.delimc;

parser code {:
  public rholang.parsing.delimc.Absyn.TypedExpr pTypedExpr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (rholang.parsing.delimc.Absyn.TypedExpr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal rholang.parsing.delimc.Absyn.TypedExpr TypedExpr;
nonterminal rholang.parsing.delimc.Absyn.Expr Expr;
nonterminal rholang.parsing.delimc.Absyn.Tuple Tuple;
nonterminal rholang.parsing.delimc.Absyn.Value Value;
nonterminal rholang.parsing.delimc.Absyn.Type Type2;
nonterminal rholang.parsing.delimc.Absyn.Type Type1;
nonterminal rholang.parsing.delimc.Absyn.Type Type;
nonterminal rholang.parsing.delimc.Absyn.TType TType;

terminal _SYMB_0;    //   :
terminal _SYMB_1;    //   \
terminal _SYMB_2;    //   .
terminal _SYMB_3;    //   >>=
terminal _SYMB_4;    //   (
terminal _SYMB_5;    //   ,
terminal _SYMB_6;    //   )
terminal _SYMB_7;    //   ->
terminal _SYMB_8;    //   CC
terminal _SYMB_9;    //   newPrompt
terminal _SYMB_10;    //   pushPrompt
terminal _SYMB_11;    //   pushSubCont
terminal _SYMB_12;    //   return
terminal _SYMB_13;    //   withSubCont

terminal String _STRING_;

terminal Integer _INTEGER_;



terminal String SimpleType;
terminal String Var;


start with TypedExpr;


TypedExpr ::= Expr:p_1 _SYMB_0 Type:p_3  {: RESULT = new rholang.parsing.delimc.Absyn.ETyped(p_1,p_3); :} 
;
Expr ::= Var:p_1  {: RESULT = new rholang.parsing.delimc.Absyn.EVar(p_1); :} 
  | Value:p_1  {: RESULT = new rholang.parsing.delimc.Absyn.EVal(p_1); :}
  | _SYMB_1 Var:p_2 _SYMB_0 Type:p_4 _SYMB_2 TypedExpr:p_6  {: RESULT = new rholang.parsing.delimc.Absyn.EAbs(p_2,p_4,p_6); :}
  | TypedExpr:p_1 TypedExpr:p_2  {: RESULT = new rholang.parsing.delimc.Absyn.EApp(p_1,p_2); :}
  | _SYMB_12 TypedExpr:p_2  {: RESULT = new rholang.parsing.delimc.Absyn.EReturn(p_2); :}
  | TypedExpr:p_1 _SYMB_3 TypedExpr:p_3  {: RESULT = new rholang.parsing.delimc.Absyn.EBind(p_1,p_3); :}
  | _SYMB_9  {: RESULT = new rholang.parsing.delimc.Absyn.ENewPrompt(); :}
  | TypedExpr:p_1 TypedExpr:p_2 _SYMB_10  {: RESULT = new rholang.parsing.delimc.Absyn.EPushPrompt(p_1,p_2); :}
  | TypedExpr:p_1 TypedExpr:p_2 _SYMB_13  {: RESULT = new rholang.parsing.delimc.Absyn.EWithSubCont(p_1,p_2); :}
  | TypedExpr:p_1 TypedExpr:p_2 _SYMB_11  {: RESULT = new rholang.parsing.delimc.Absyn.EPushSubCont(p_1,p_2); :}
  | Tuple:p_1  {: RESULT = new rholang.parsing.delimc.Absyn.ETuple(p_1); :}
;
Tuple ::= _SYMB_4 TypedExpr:p_2 _SYMB_5 TypedExpr:p_4 _SYMB_6  {: RESULT = new rholang.parsing.delimc.Absyn.Tuple2(p_2,p_4); :} 
  | _SYMB_4 TypedExpr:p_2 _SYMB_5 TypedExpr:p_4 _SYMB_5 TypedExpr:p_6 _SYMB_6  {: RESULT = new rholang.parsing.delimc.Absyn.Tuple3(p_2,p_4,p_6); :}
;
Value ::= _INTEGER_:p_1  {: RESULT = new rholang.parsing.delimc.Absyn.VInt(p_1); :} 
  | _STRING_:p_1  {: RESULT = new rholang.parsing.delimc.Absyn.VString(p_1); :}
;
Type2 ::= SimpleType:p_1  {: RESULT = new rholang.parsing.delimc.Absyn.TSimple(p_1); :} 
  | _SYMB_4 Type:p_2 _SYMB_6  {: RESULT = p_2; :}
;
Type1 ::= TType:p_1  {: RESULT = new rholang.parsing.delimc.Absyn.TTuple(p_1); :} 
  | Type2:p_1  {: RESULT = p_1; :}
;
Type ::= _SYMB_8 Type1:p_2 Type1:p_3  {: RESULT = new rholang.parsing.delimc.Absyn.TMonad(p_2,p_3); :} 
  | Type1:p_1 _SYMB_7 Type:p_3  {: RESULT = new rholang.parsing.delimc.Absyn.TFun(p_1,p_3); :}
  | Type1:p_1  {: RESULT = p_1; :}
;
TType ::= _SYMB_4 Type:p_2 _SYMB_5 Type:p_4 _SYMB_6  {: RESULT = new rholang.parsing.delimc.Absyn.TType2(p_2,p_4); :} 
  | _SYMB_4 Type:p_2 _SYMB_5 Type:p_4 _SYMB_5 Type:p_6 _SYMB_6  {: RESULT = new rholang.parsing.delimc.Absyn.TType3(p_2,p_4,p_6); :}
;

