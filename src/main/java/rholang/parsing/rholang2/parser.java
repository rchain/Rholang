
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 30 17:07:16 CEST 2016
//----------------------------------------------------

package rholang.parsing.rholang2;


/** CUP v0.10k generated parser.
  * @version Thu Jun 30 17:07:16 CEST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\003\013\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\005" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\006\007\000\002\006\003\000\002\007\011\000\002" +
    "\007\006\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\007\003\000\002\010\005\000\002\010\003" +
    "\000\002\011\003\000\002\011\005\000\002\012\003\000" +
    "\002\012\004\000\002\013\005\000\002\014\003\000\002" +
    "\014\005\000\002\015\007\000\002\016\003\000\002\016" +
    "\004\000\002\017\010\000\002\020\003\000\002\020\004" +
    "\000\002\021\003\000\002\021\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\006\000\002\025\003\000\002\026" +
    "\003\000\002\026\003\000\002\027\002\000\002\027\003" +
    "\000\002\027\005\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\005\000\002\031\004\000\002" +
    "\031\004\000\002\031\003\000\002\032\007\000\002\032" +
    "\003\000\002\033\011\000\002\033\006\000\002\033\006" +
    "\000\002\033\006\000\002\033\003\000\002\034\005\000" +
    "\002\034\003\000\002\035\002\000\002\035\003\000\002" +
    "\035\005\000\002\036\003\000\002\036\004\000\002\037" +
    "\002\000\002\037\003\000\002\037\005\000\002\040\005" +
    "\000\002\041\003\000\002\041\005\000\002\042\007\000" +
    "\002\043\003\000\002\043\004\000\002\044\006\000\002" +
    "\045\003\000\002\045\005\000\002\046\003\000\002\046" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\025\004\001\002\000\004\040\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\012\005\uffbe\016\011\022" +
    "\013\041\016\001\002\000\016\004\074\011\073\012\072" +
    "\022\013\023\065\041\061\001\002\000\006\005\uffbd\015" +
    "\251\001\002\000\026\005\uffd7\010\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\017\uffd7\020\uffd7\021\uffd7\027\uffd7\033\uffd7\001" +
    "\002\000\004\005\017\001\002\000\024\005\uffc0\010\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\033" +
    "\uffc0\001\002\000\026\005\uffd8\010\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\017\uffd8\020\uffd8\021\uffd8\027\uffd8\033\uffd8\001" +
    "\002\000\004\006\020\001\002\000\004\007\021\001\002" +
    "\000\040\004\045\011\043\012\042\016\040\023\032\026" +
    "\030\030\051\031\050\032\047\034\023\035\041\036\022" +
    "\037\035\040\027\041\025\001\002\000\022\005\uffdf\010" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\020\uffdf\021\uffdf\033\uffdf" +
    "\001\002\000\022\005\uffd9\010\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\020\uffd9\021\uffd9\033\uffd9\001\002\000\022\005\uffdb" +
    "\010\uffdb\013\uffdb\014\uffdb\015\uffdb\020\uffdb\021\uffdb\033" +
    "\uffdb\001\002\000\020\005\ufffd\007\226\010\ufffd\013\uffec" +
    "\014\ufffd\015\ufffd\033\ufffd\001\002\000\004\013\245\001" +
    "\002\000\004\004\242\001\002\000\004\004\234\001\002" +
    "\000\022\005\ufff9\010\ufff9\013\ufff9\014\ufff9\015\ufff9\020" +
    "\ufff9\021\ufff9\033\ufff9\001\002\000\022\005\uffff\010\uffff" +
    "\013\uffff\014\uffff\015\uffff\020\uffff\021\uffff\033\uffff\001" +
    "\002\000\014\005\ufff7\010\ufff7\014\ufff7\015\ufff7\033\ufff7" +
    "\001\002\000\022\005\uffe1\010\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\020\uffe1\021\uffe1\033\uffe1\001\002\000\022\005\uffde" +
    "\010\uffde\013\uffde\014\uffde\015\uffde\020\uffde\021\uffde\033" +
    "\uffde\001\002\000\014\005\ufff1\010\ufff1\014\ufff1\015\ufff1" +
    "\033\ufff1\001\002\000\014\005\uffef\010\uffef\014\uffef\015" +
    "\uffef\033\uffef\001\002\000\024\004\045\011\043\012\042" +
    "\023\032\034\023\035\041\036\022\037\035\041\225\001" +
    "\002\000\022\005\uffdd\010\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\020\uffdd\021\uffdd\033\uffdd\001\002\000\006\016\040\041" +
    "\211\001\002\000\006\016\040\041\211\001\002\000\022" +
    "\005\uffdc\010\uffdc\013\uffdc\014\uffdc\015\uffdc\020\uffdc\021" +
    "\uffdc\033\uffdc\001\002\000\040\004\045\011\043\012\042" +
    "\016\040\023\032\026\030\030\051\031\050\032\047\034" +
    "\023\035\041\036\022\037\035\040\027\041\025\001\002" +
    "\000\006\010\217\014\055\001\002\000\004\007\175\001" +
    "\002\000\004\041\170\001\002\000\040\004\045\011\043" +
    "\012\042\016\040\023\032\026\030\030\051\031\050\032" +
    "\047\034\023\035\041\036\022\037\035\040\027\041\025" +
    "\001\002\000\022\005\ufffe\010\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\020\ufffe\021\ufffe\033\ufffe\001\002\000\022\005\uffe0" +
    "\010\uffe0\013\uffe0\014\uffe0\015\uffe0\020\uffe0\021\uffe0\033" +
    "\uffe0\001\002\000\006\014\055\033\056\001\002\000\040" +
    "\004\045\011\043\012\042\016\040\023\032\026\030\030" +
    "\051\031\050\032\047\034\023\035\041\036\022\037\035" +
    "\040\027\041\025\001\002\000\030\004\074\011\073\012" +
    "\072\016\011\022\013\023\065\026\063\030\101\031\077" +
    "\040\062\041\061\001\002\000\042\004\074\005\uffe6\010" +
    "\uffe6\011\073\012\072\014\uffe6\015\uffe6\016\011\022\013" +
    "\023\065\026\063\030\101\031\077\033\uffe6\040\062\041" +
    "\061\001\002\000\020\005\uffd3\010\uffd3\013\uffc0\014\uffd3" +
    "\015\uffd3\021\uffd3\033\uffd3\001\002\000\026\005\uffd8\007" +
    "\162\010\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\033\uffd8\001\002\000\004\004\157\001\002\000" +
    "\004\004\143\001\002\000\004\013\134\001\002\000\024" +
    "\005\uffd2\010\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\033\uffd2\001\002\000\024\005\uffcd\010\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\033" +
    "\uffcd\001\002\000\016\005\uffcb\010\uffcb\014\uffcb\015\uffcb" +
    "\021\uffcb\033\uffcb\001\002\000\016\005\uffc6\010\uffc6\014" +
    "\uffc6\015\uffc6\021\uffc6\033\uffc6\001\002\000\016\005\uffc4" +
    "\010\uffc4\014\uffc4\015\uffc4\021\uffc4\033\uffc4\001\002\000" +
    "\010\016\011\022\013\041\016\001\002\000\010\016\011" +
    "\022\013\041\016\001\002\000\030\004\074\011\073\012" +
    "\072\016\011\022\013\023\065\026\063\030\101\031\077" +
    "\040\062\041\061\001\002\000\024\005\uffd1\010\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\033\uffd1" +
    "\001\002\000\014\005\ufff4\010\ufff4\014\ufff4\015\ufff4\033" +
    "\ufff4\001\002\000\010\022\013\027\uffd6\041\016\001\002" +
    "\000\006\014\103\021\116\001\002\000\030\004\074\011" +
    "\073\012\072\016\011\022\013\023\065\026\063\030\101" +
    "\031\077\040\062\041\061\001\002\000\006\014\103\033" +
    "\104\001\002\000\030\004\074\011\073\012\072\016\011" +
    "\022\013\023\065\026\063\030\101\031\077\040\062\041" +
    "\061\001\002\000\030\004\074\011\073\012\072\016\011" +
    "\022\013\023\065\026\063\030\101\031\077\040\062\041" +
    "\061\001\002\000\044\004\074\005\uffb7\010\uffb7\011\073" +
    "\012\072\014\uffb7\015\uffb7\016\011\021\uffb7\022\013\023" +
    "\065\026\063\030\101\031\077\033\uffb7\040\062\041\061" +
    "\001\002\000\006\014\103\021\110\001\002\000\016\005" +
    "\uffc9\010\uffc9\014\uffc9\015\uffc9\021\uffc9\033\uffc9\001\002" +
    "\000\004\007\111\001\002\000\030\004\074\011\073\012" +
    "\072\016\011\022\013\023\065\026\063\030\101\031\077" +
    "\040\062\041\061\001\002\000\006\010\113\014\103\001" +
    "\002\000\044\004\uffb8\005\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\021\uffb8\022\uffb8\023\uffb8\026" +
    "\uffb8\030\uffb8\031\uffb8\033\uffb8\040\uffb8\041\uffb8\001\002" +
    "\000\016\005\uffb6\010\uffb6\014\uffb6\015\uffb6\021\uffb6\033" +
    "\uffb6\001\002\000\016\005\uffc5\010\uffc5\014\uffc5\015\uffc5" +
    "\021\uffc5\033\uffc5\001\002\000\004\007\117\001\002\000" +
    "\040\004\045\011\043\012\042\016\040\023\032\026\030" +
    "\030\051\031\050\032\047\034\023\035\041\036\022\037" +
    "\035\040\027\041\025\001\002\000\006\010\121\014\055" +
    "\001\002\000\042\004\uffe7\005\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\022\uffe7\023\uffe7\026\uffe7" +
    "\030\uffe7\031\uffe7\033\uffe7\040\uffe7\041\uffe7\001\002\000" +
    "\004\027\126\001\002\000\006\015\124\027\uffd5\001\002" +
    "\000\010\022\013\027\uffd6\041\016\001\002\000\004\027" +
    "\uffd4\001\002\000\030\004\074\011\073\012\072\016\011" +
    "\022\013\023\065\026\063\030\101\031\077\040\062\041" +
    "\061\001\002\000\016\005\uffc8\010\uffc8\014\uffc8\015\uffc8" +
    "\021\uffc8\033\uffc8\001\002\000\006\005\131\014\103\001" +
    "\002\000\024\005\uffd0\010\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\033\uffd0\001\002\000\024\005" +
    "\uffcf\010\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\033\uffcf\001\002\000\024\005\uffce\010\uffce\013" +
    "\uffce\014\uffce\015\uffce\017\uffce\020\uffce\021\uffce\033\uffce" +
    "\001\002\000\004\004\135\001\002\000\032\004\074\005" +
    "\uffc3\011\073\012\072\016\011\022\013\023\065\026\063" +
    "\030\101\031\077\040\062\041\061\001\002\000\004\005" +
    "\142\001\002\000\012\005\uffc2\010\uffc2\014\103\015\140" +
    "\001\002\000\034\004\074\005\uffc3\010\uffc3\011\073\012" +
    "\072\016\011\022\013\023\065\026\063\030\101\031\077" +
    "\040\062\041\061\001\002\000\006\005\uffc1\010\uffc1\001" +
    "\002\000\016\005\uffcc\010\uffcc\014\uffcc\015\uffcc\021\uffcc" +
    "\033\uffcc\001\002\000\010\016\011\022\013\041\016\001" +
    "\002\000\004\005\153\001\002\000\004\017\151\001\002" +
    "\000\006\005\uffba\020\147\001\002\000\010\016\011\022" +
    "\013\041\016\001\002\000\004\005\uffb9\001\002\000\010" +
    "\016\011\022\013\041\016\001\002\000\006\005\uffbb\020" +
    "\uffbb\001\002\000\004\007\154\001\002\000\030\004\074" +
    "\011\073\012\072\016\011\022\013\023\065\026\063\030" +
    "\101\031\077\040\062\041\061\001\002\000\006\010\156" +
    "\014\103\001\002\000\016\005\uffca\010\uffca\014\uffca\015" +
    "\uffca\021\uffca\033\uffca\001\002\000\032\004\074\005\uffc3" +
    "\011\073\012\072\016\011\022\013\023\065\026\063\030" +
    "\101\031\077\040\062\041\061\001\002\000\004\005\161" +
    "\001\002\000\016\005\uffc7\010\uffc7\014\uffc7\015\uffc7\021" +
    "\uffc7\033\uffc7\001\002\000\032\004\074\010\uffc3\011\073" +
    "\012\072\016\011\022\013\023\065\026\063\030\101\031" +
    "\077\040\062\041\061\001\002\000\004\010\164\001\002" +
    "\000\024\005\uffb5\010\uffb5\013\uffb5\014\uffb5\015\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\033\uffb5\001\002\000\014\005\uffe5" +
    "\010\uffe5\014\uffe5\015\uffe5\033\uffe5\001\002\000\014\005" +
    "\ufff0\010\ufff0\014\ufff0\015\ufff0\033\ufff0\001\002\000\004" +
    "\027\173\001\002\000\006\015\171\027\uffb4\001\002\000" +
    "\004\041\170\001\002\000\004\027\uffb3\001\002\000\040" +
    "\004\045\011\043\012\042\016\040\023\032\026\030\030" +
    "\051\031\050\032\047\034\023\035\041\036\022\037\035" +
    "\040\027\041\025\001\002\000\014\005\ufff3\010\ufff3\014" +
    "\ufff3\015\ufff3\033\ufff3\001\002\000\004\024\177\001\002" +
    "\000\004\010\216\001\002\000\010\016\011\022\013\041" +
    "\016\001\002\000\006\010\uffe3\024\177\001\002\000\004" +
    "\010\uffe2\001\002\000\004\021\212\001\002\000\004\017" +
    "\207\001\002\000\010\005\uffe9\020\205\021\uffe9\001\002" +
    "\000\010\016\011\022\013\041\016\001\002\000\006\005" +
    "\uffe8\021\uffe8\001\002\000\006\016\040\041\211\001\002" +
    "\000\010\005\uffea\020\uffea\021\uffea\001\002\000\022\005" +
    "\uffec\010\uffec\013\uffec\014\uffec\015\uffec\020\uffec\021\uffec" +
    "\033\uffec\001\002\000\004\007\213\001\002\000\040\004" +
    "\045\011\043\012\042\016\040\023\032\026\030\030\051" +
    "\031\050\032\047\034\023\035\041\036\022\037\035\040" +
    "\027\041\025\001\002\000\006\010\215\014\055\001\002" +
    "\000\006\010\uffe4\024\uffe4\001\002\000\014\005\ufff5\010" +
    "\ufff5\014\ufff5\015\ufff5\033\ufff5\001\002\000\004\002\000" +
    "\001\002\000\006\005\221\014\055\001\002\000\022\005" +
    "\ufffc\010\ufffc\013\ufffc\014\ufffc\015\ufffc\020\ufffc\021\ufffc" +
    "\033\ufffc\001\002\000\022\005\ufffb\010\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\020\ufffb\021\ufffb\033\ufffb\001\002\000\022" +
    "\005\ufffa\010\ufffa\013\ufffa\014\ufffa\015\ufffa\020\ufffa\021" +
    "\ufffa\033\ufffa\001\002\000\022\005\uffeb\010\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\020\uffeb\021\uffeb\033\uffeb\001\002\000" +
    "\024\005\ufffd\007\226\010\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\020\ufffd\021\ufffd\033\ufffd\001\002\000\040\004\045\011" +
    "\043\012\042\016\040\023\032\026\030\030\051\031\050" +
    "\032\047\034\023\035\041\036\022\037\035\040\027\041" +
    "\025\001\002\000\004\010\233\001\002\000\012\005\uffee" +
    "\010\uffee\014\055\015\231\001\002\000\040\004\045\011" +
    "\043\012\042\016\040\023\032\026\030\030\051\031\050" +
    "\032\047\034\023\035\041\036\022\037\035\040\027\041" +
    "\025\001\002\000\006\005\uffed\010\uffed\001\002\000\022" +
    "\005\uffda\010\uffda\013\uffda\014\uffda\015\uffda\020\uffda\021" +
    "\uffda\033\uffda\001\002\000\010\016\011\022\013\041\016" +
    "\001\002\000\004\005\236\001\002\000\004\007\237\001" +
    "\002\000\040\004\045\011\043\012\042\016\040\023\032" +
    "\026\030\030\051\031\050\032\047\034\023\035\041\036" +
    "\022\037\035\040\027\041\025\001\002\000\006\010\241" +
    "\014\055\001\002\000\014\005\ufff6\010\ufff6\014\ufff6\015" +
    "\ufff6\033\ufff6\001\002\000\040\004\045\011\043\012\042" +
    "\016\040\023\032\026\030\030\051\031\050\032\047\034" +
    "\023\035\041\036\022\037\035\040\027\041\025\001\002" +
    "\000\004\005\244\001\002\000\014\005\ufff2\010\ufff2\014" +
    "\ufff2\015\ufff2\033\ufff2\001\002\000\004\004\246\001\002" +
    "\000\040\004\045\011\043\012\042\016\040\023\032\026" +
    "\030\030\051\031\050\032\047\034\023\035\041\036\022" +
    "\037\035\040\027\041\025\001\002\000\004\005\250\001" +
    "\002\000\014\005\ufff8\010\ufff8\014\ufff8\015\ufff8\033\ufff8" +
    "\001\002\000\012\005\uffbe\016\011\022\013\041\016\001" +
    "\002\000\004\005\uffbc\001\002\000\024\005\uffd3\010\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3\033" +
    "\uffd3\001\002\000\024\005\uffbf\010\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\017\uffbf\020\uffbf\021\uffbf\033\uffbf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\014\036\011\037\013\001\001\000\012\026\252\030" +
    "\065\031\253\044\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\030" +
    "\005\032\006\035\007\036\010\045\012\025\021\051\022" +
    "\033\023\052\024\043\025\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\030\005\223\021\051\022\033\023\052\024" +
    "\043\025\023\001\001\000\002\001\001\000\004\012\222" +
    "\001\001\000\004\012\221\001\001\000\002\001\001\000" +
    "\030\004\030\005\032\006\035\007\036\010\217\012\025" +
    "\021\051\022\033\023\052\024\043\025\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\166\001\001" +
    "\000\030\004\030\005\032\006\035\007\036\010\053\012" +
    "\025\021\051\022\033\023\052\024\043\025\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\030\005\032\006\035\007\165\012\025\021\051" +
    "\022\033\023\052\024\043\025\023\001\001\000\026\015" +
    "\056\016\075\026\057\030\065\031\066\032\067\033\070" +
    "\034\077\036\063\044\074\001\001\000\026\015\056\016" +
    "\164\026\057\030\065\031\066\032\067\033\070\034\077" +
    "\036\063\044\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\014\036\132" +
    "\001\001\000\006\026\014\036\131\001\001\000\022\026" +
    "\057\030\065\031\066\032\067\033\070\034\127\036\063" +
    "\044\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\122\027\121\001\001\000\002\001\001\000\022" +
    "\026\057\030\065\031\066\032\067\033\070\034\101\036" +
    "\063\044\074\001\001\000\002\001\001\000\020\026\057" +
    "\030\065\031\066\032\067\033\114\036\063\044\074\001" +
    "\001\000\026\026\057\030\065\031\066\032\067\033\070" +
    "\034\105\036\063\042\104\043\106\044\074\001\001\000" +
    "\026\026\057\030\065\031\066\032\067\033\070\034\105" +
    "\036\063\042\104\043\113\044\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\026\057" +
    "\030\065\031\066\032\067\033\070\034\111\036\063\044" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\030\005\032\006\035\007\036\010\117\012\025\021\051" +
    "\022\033\023\052\024\043\025\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\122\027\124\001\001\000\002\001\001\000" +
    "\020\026\057\030\065\031\066\032\067\033\126\036\063" +
    "\044\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\026\057\030\065\031\066\032\067\033" +
    "\070\034\136\035\135\036\063\044\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\026\057\030\065\031" +
    "\066\032\067\033\070\034\136\035\140\036\063\044\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\014\036\144\040\145\041\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\014\036" +
    "\144\040\145\041\147\001\001\000\002\001\001\000\006" +
    "\026\014\036\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\026\057\030\065\031\066\032\067\033\070" +
    "\034\154\036\063\044\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\026\057\030\065\031\066\032\067" +
    "\033\070\034\136\035\157\036\063\044\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\026\057\030\065" +
    "\031\066\032\067\033\070\034\136\035\162\036\063\044" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\171\001\001\000\002\001\001\000\026" +
    "\004\030\005\032\006\035\007\173\012\025\021\051\022" +
    "\033\023\052\024\043\025\023\001\001\000\002\001\001" +
    "\000\006\017\177\020\175\001\001\000\002\001\001\000" +
    "\012\013\203\014\201\026\014\036\202\001\001\000\006" +
    "\017\177\020\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\203" +
    "\014\205\026\014\036\202\001\001\000\002\001\001\000" +
    "\004\012\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\030\005\032\006\035\007" +
    "\036\010\213\012\025\021\051\022\033\023\052\024\043" +
    "\025\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\030\005\032\006\035" +
    "\007\036\010\227\011\226\012\025\021\051\022\033\023" +
    "\052\024\043\025\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\030\005\032\006\035\007\036\010" +
    "\227\011\231\012\025\021\051\022\033\023\052\024\043" +
    "\025\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\203\014\234\026\014\036\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\030\005\032\006" +
    "\035\007\036\010\237\012\025\021\051\022\033\023\052" +
    "\024\043\025\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\030\005\032\006\035\007\036\010\227" +
    "\011\242\012\025\021\051\022\033\023\052\024\043\025" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\030\005\032\006\035\007\036\010" +
    "\227\011\246\012\025\021\051\022\033\023\052\024\043" +
    "\025\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\014\036\011\037\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public rholang.parsing.rholang2.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (rholang.parsing.rholang2.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListName ::= Name _SYMB_9 ListName 
            {
              rholang.parsing.rholang2.Absyn.ListName RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.ListName p_3 = (rholang.parsing.rholang2.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*ListName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ListName ::= Name 
            {
              rholang.parsing.rholang2.Absyn.ListName RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*ListName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ListVar ::= Var _SYMB_9 ListVar 
            {
              rholang.parsing.rholang2.Absyn.ListVar RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.ListVar p_3 = (rholang.parsing.rholang2.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*ListVar*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ListVar ::= Var 
            {
              rholang.parsing.rholang2.Absyn.ListVar RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListVar(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*ListVar*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ValPattern ::= Var _SYMB_3 ListPPattern _SYMB_4 
            {
              rholang.parsing.rholang2.Absyn.ValPattern RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.rholang2.Absyn.ListPPattern p_3 = (rholang.parsing.rholang2.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.VPtStruct(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*ValPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListPatternPatternMatch ::= PatternPatternMatch ListPatternPatternMatch 
            {
              rholang.parsing.rholang2.Absyn.ListPatternPatternMatch RESULT = null;
		rholang.parsing.rholang2.Absyn.PatternPatternMatch p_1 = (rholang.parsing.rholang2.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rholang.parsing.rholang2.Absyn.ListPatternPatternMatch p_2 = (rholang.parsing.rholang2.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*ListPatternPatternMatch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListPatternPatternMatch ::= PatternPatternMatch 
            {
              rholang.parsing.rholang2.Absyn.ListPatternPatternMatch RESULT = null;
		rholang.parsing.rholang2.Absyn.PatternPatternMatch p_1 = (rholang.parsing.rholang2.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*ListPatternPatternMatch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PatternPatternMatch ::= PPattern _SYMB_13 _SYMB_3 PPattern _SYMB_4 
            {
              rholang.parsing.rholang2.Absyn.PatternPatternMatch RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_1 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang2.Absyn.PPattern p_4 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PtBranch(p_1,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*PatternPatternMatch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListPatternBind ::= PatternBind _SYMB_12 ListPatternBind 
            {
              rholang.parsing.rholang2.Absyn.ListPatternBind RESULT = null;
		rholang.parsing.rholang2.Absyn.PatternBind p_1 = (rholang.parsing.rholang2.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.ListPatternBind p_3 = (rholang.parsing.rholang2.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ListPatternBind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListPatternBind ::= PatternBind 
            {
              rholang.parsing.rholang2.Absyn.ListPatternBind RESULT = null;
		rholang.parsing.rholang2.Absyn.PatternBind p_1 = (rholang.parsing.rholang2.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListPatternBind(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ListPatternBind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PatternBind ::= CPattern _SYMB_11 CPattern 
            {
              rholang.parsing.rholang2.Absyn.PatternBind RESULT = null;
		rholang.parsing.rholang2.Absyn.CPattern p_1 = (rholang.parsing.rholang2.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.CPattern p_3 = (rholang.parsing.rholang2.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PtBind(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*PatternBind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListCPattern ::= CPattern _SYMB_9 ListCPattern 
            {
              rholang.parsing.rholang2.Absyn.ListCPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.CPattern p_1 = (rholang.parsing.rholang2.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.ListCPattern p_3 = (rholang.parsing.rholang2.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListCPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListCPattern ::= CPattern 
            {
              rholang.parsing.rholang2.Absyn.ListCPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.CPattern p_1 = (rholang.parsing.rholang2.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListCPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListCPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListCPattern ::= 
            {
              rholang.parsing.rholang2.Absyn.ListCPattern RESULT = null;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListCPattern(); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListCPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CPattern ::= _SYMB_10 PPattern3 
            {
              rholang.parsing.rholang2.Absyn.CPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_2 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.CPtQuote(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*CPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CPattern ::= VarPattern 
            {
              rholang.parsing.rholang2.Absyn.CPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.VarPattern p_1 = (rholang.parsing.rholang2.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.CPtVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*CPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListPPattern ::= PPattern _SYMB_9 ListPPattern 
            {
              rholang.parsing.rholang2.Absyn.ListPPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_1 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.ListPPattern p_3 = (rholang.parsing.rholang2.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ListPPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListPPattern ::= PPattern 
            {
              rholang.parsing.rholang2.Absyn.ListPPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_1 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListPPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ListPPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListPPattern ::= 
            {
              rholang.parsing.rholang2.Absyn.ListPPattern RESULT = null;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListPPattern(); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ListPPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PPattern ::= PPattern1 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_1 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*PPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PPattern ::= PPattern _SYMB_8 PPattern1 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_1 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.PPattern p_3 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPtPar(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*PPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PPattern1 ::= PPattern2 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_1 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*PPattern1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PPattern1 ::= Name _SYMB_0 ListPPattern _SYMB_1 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.rholang2.Absyn.ListPPattern p_3 = (rholang.parsing.rholang2.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPtConstr(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*PPattern1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PPattern1 ::= _SYMB_21 ListVarPattern _SYMB_19 PPattern1 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.ListVarPattern p_2 = (rholang.parsing.rholang2.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.PPattern p_4 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPtNew(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*PPattern1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PPattern1 ::= _SYMB_20 PPattern _SYMB_23 ListPatternPatternMatch 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_2 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.ListPatternPatternMatch p_4 = (rholang.parsing.rholang2.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPtMatch(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*PPattern1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PPattern1 ::= _SYMB_18 _SYMB_0 ListPatternBind _SYMB_1 _SYMB_3 PPattern _SYMB_4 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.ListPatternBind p_3 = (rholang.parsing.rholang2.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang2.Absyn.PPattern p_6 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPtInput(p_3,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*PPattern1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PPattern2 ::= PPattern3 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_1 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*PPattern2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PPattern2 ::= CPattern _SYMB_7 _SYMB_0 ListPPattern _SYMB_1 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.CPattern p_1 = (rholang.parsing.rholang2.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang2.Absyn.ListPPattern p_4 = (rholang.parsing.rholang2.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPtOutput(p_1,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*PPattern2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PPattern3 ::= PPattern4 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_1 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*PPattern3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PPattern3 ::= _SYMB_6 CPattern 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.CPattern p_2 = (rholang.parsing.rholang2.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPtInject(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*PPattern3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PPattern3 ::= _SYMB_5 CPattern 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.CPattern p_2 = (rholang.parsing.rholang2.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPtDrop(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*PPattern3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PPattern4 ::= _SYMB_0 PPattern _SYMB_1 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_2 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*PPattern4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PPattern4 ::= ValPattern 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.ValPattern p_1 = (rholang.parsing.rholang2.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPtVal(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*PPattern4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PPattern4 ::= _SYMB_15 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPtNil(); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*PPattern4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PPattern4 ::= VarPattern 
            {
              rholang.parsing.rholang2.Absyn.PPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.VarPattern p_1 = (rholang.parsing.rholang2.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPtVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*PPattern4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListVarPattern ::= VarPattern _SYMB_9 ListVarPattern 
            {
              rholang.parsing.rholang2.Absyn.ListVarPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.VarPattern p_1 = (rholang.parsing.rholang2.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.ListVarPattern p_3 = (rholang.parsing.rholang2.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ListVarPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListVarPattern ::= VarPattern 
            {
              rholang.parsing.rholang2.Absyn.ListVarPattern RESULT = null;
		rholang.parsing.rholang2.Absyn.VarPattern p_1 = (rholang.parsing.rholang2.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListVarPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ListVarPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListVarPattern ::= 
            {
              rholang.parsing.rholang2.Absyn.ListVarPattern RESULT = null;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListVarPattern(); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ListVarPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarPattern ::= _SYMB_14 
            {
              rholang.parsing.rholang2.Absyn.VarPattern RESULT = null;
		 RESULT = new rholang.parsing.rholang2.Absyn.VarPtWild(); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*VarPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarPattern ::= Var 
            {
              rholang.parsing.rholang2.Absyn.VarPattern RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.VarPtVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*VarPattern*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Collect ::= _STRING_ 
            {
              rholang.parsing.rholang2.Absyn.Collect RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.CString(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Collect*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Struct ::= Var _SYMB_3 ListProc _SYMB_4 
            {
              rholang.parsing.rholang2.Absyn.Struct RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.rholang2.Absyn.ListProc p_3 = (rholang.parsing.rholang2.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.StructConstr(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Struct*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Entity ::= Collect 
            {
              rholang.parsing.rholang2.Absyn.Entity RESULT = null;
		rholang.parsing.rholang2.Absyn.Collect p_1 = (rholang.parsing.rholang2.Absyn.Collect)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ECollect(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Entity*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Entity ::= Struct 
            {
              rholang.parsing.rholang2.Absyn.Entity RESULT = null;
		rholang.parsing.rholang2.Absyn.Struct p_1 = (rholang.parsing.rholang2.Absyn.Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.EStruct(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Entity*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Entity ::= _CHAR_ 
            {
              rholang.parsing.rholang2.Absyn.Entity RESULT = null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.EChar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Entity*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Quantity ::= _DOUBLE_ 
            {
              rholang.parsing.rholang2.Absyn.Quantity RESULT = null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.QDouble(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Quantity*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Quantity ::= _INTEGER_ 
            {
              rholang.parsing.rholang2.Absyn.Quantity RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.QInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Quantity*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Value ::= Entity 
            {
              rholang.parsing.rholang2.Absyn.Value RESULT = null;
		rholang.parsing.rholang2.Absyn.Entity p_1 = (rholang.parsing.rholang2.Absyn.Entity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.VEnt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Value*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Value ::= Quantity 
            {
              rholang.parsing.rholang2.Absyn.Value RESULT = null;
		rholang.parsing.rholang2.Absyn.Quantity p_1 = (rholang.parsing.rholang2.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.VQuant(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Value*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListCBranch ::= CBranch ListCBranch 
            {
              rholang.parsing.rholang2.Absyn.ListCBranch RESULT = null;
		rholang.parsing.rholang2.Absyn.CBranch p_1 = (rholang.parsing.rholang2.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rholang.parsing.rholang2.Absyn.ListCBranch p_2 = (rholang.parsing.rholang2.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ListCBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListCBranch ::= CBranch 
            {
              rholang.parsing.rholang2.Absyn.ListCBranch RESULT = null;
		rholang.parsing.rholang2.Absyn.CBranch p_1 = (rholang.parsing.rholang2.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListCBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ListCBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CBranch ::= _SYMB_16 ListBind _SYMB_13 _SYMB_3 Proc _SYMB_4 
            {
              rholang.parsing.rholang2.Absyn.CBranch RESULT = null;
		rholang.parsing.rholang2.Absyn.ListBind p_2 = (rholang.parsing.rholang2.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang2.Absyn.Proc p_5 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.Choice(p_2,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*CBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListPMBranch ::= PMBranch ListPMBranch 
            {
              rholang.parsing.rholang2.Absyn.ListPMBranch RESULT = null;
		rholang.parsing.rholang2.Absyn.PMBranch p_1 = (rholang.parsing.rholang2.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rholang.parsing.rholang2.Absyn.ListPMBranch p_2 = (rholang.parsing.rholang2.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*ListPMBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListPMBranch ::= PMBranch 
            {
              rholang.parsing.rholang2.Absyn.ListPMBranch RESULT = null;
		rholang.parsing.rholang2.Absyn.PMBranch p_1 = (rholang.parsing.rholang2.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListPMBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*ListPMBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PMBranch ::= PPattern _SYMB_13 _SYMB_3 Proc _SYMB_4 
            {
              rholang.parsing.rholang2.Absyn.PMBranch RESULT = null;
		rholang.parsing.rholang2.Absyn.PPattern p_1 = (rholang.parsing.rholang2.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang2.Absyn.Proc p_4 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PatternMatch(p_1,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*PMBranch*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListBind ::= Bind _SYMB_12 ListBind 
            {
              rholang.parsing.rholang2.Absyn.ListBind RESULT = null;
		rholang.parsing.rholang2.Absyn.Bind p_1 = (rholang.parsing.rholang2.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.ListBind p_3 = (rholang.parsing.rholang2.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*ListBind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListBind ::= Bind 
            {
              rholang.parsing.rholang2.Absyn.ListBind RESULT = null;
		rholang.parsing.rholang2.Absyn.Bind p_1 = (rholang.parsing.rholang2.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListBind(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*ListBind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Bind ::= CPattern _SYMB_11 Chan 
            {
              rholang.parsing.rholang2.Absyn.Bind RESULT = null;
		rholang.parsing.rholang2.Absyn.CPattern p_1 = (rholang.parsing.rholang2.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.Chan p_3 = (rholang.parsing.rholang2.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.InputBind(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Bind*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Chan ::= _SYMB_10 Proc3 
            {
              rholang.parsing.rholang2.Absyn.Chan RESULT = null;
		rholang.parsing.rholang2.Absyn.Proc p_2 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.CQuote(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Chan*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Chan ::= Var 
            {
              rholang.parsing.rholang2.Absyn.Chan RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.CVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Chan*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListProc ::= Proc _SYMB_9 ListProc 
            {
              rholang.parsing.rholang2.Absyn.ListProc RESULT = null;
		rholang.parsing.rholang2.Absyn.Proc p_1 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.ListProc p_3 = (rholang.parsing.rholang2.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ListProc*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListProc ::= Proc 
            {
              rholang.parsing.rholang2.Absyn.ListProc RESULT = null;
		rholang.parsing.rholang2.Absyn.Proc p_1 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.ListProc(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ListProc*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= Proc1 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.Proc p_1 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Proc*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc ::= Proc _SYMB_8 Proc1 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.Proc p_1 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.Proc p_3 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PPar(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Proc*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc1 ::= Proc2 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.Proc p_1 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Proc1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc1 ::= Name _SYMB_0 ListProc _SYMB_1 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.rholang2.Absyn.ListProc p_3 = (rholang.parsing.rholang2.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PConstr(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Proc1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Proc1 ::= _SYMB_21 ListVar _SYMB_19 Proc1 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.ListVar p_2 = (rholang.parsing.rholang2.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.Proc p_4 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PNew(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Proc1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Proc1 ::= _SYMB_20 Proc _SYMB_23 ListPMBranch 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.Proc p_2 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.rholang2.Absyn.ListPMBranch p_4 = (rholang.parsing.rholang2.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PMatch(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Proc1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Proc1 ::= _SYMB_22 _SYMB_3 ListCBranch _SYMB_4 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.ListCBranch p_3 = (rholang.parsing.rholang2.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PChoice(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Proc1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Proc1 ::= _SYMB_18 _SYMB_0 ListBind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.ListBind p_3 = (rholang.parsing.rholang2.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang2.Absyn.Proc p_6 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PInput(p_3,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Proc1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Proc2 ::= Proc3 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.Proc p_1 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Proc2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Proc2 ::= Chan _SYMB_7 _SYMB_0 ListProc _SYMB_1 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.Chan p_1 = (rholang.parsing.rholang2.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.rholang2.Absyn.ListProc p_4 = (rholang.parsing.rholang2.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PLift(p_1,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Proc2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Proc3 ::= Proc4 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.Proc p_1 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Proc3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Proc3 ::= _SYMB_6 Chan 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.Chan p_2 = (rholang.parsing.rholang2.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PInject(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Proc3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Proc3 ::= _SYMB_5 Chan 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.Chan p_2 = (rholang.parsing.rholang2.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PDrop(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Proc3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Proc4 ::= _SYMB_0 Proc _SYMB_1 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.Proc p_2 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Proc4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Proc4 ::= Var 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Proc4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Proc4 ::= Value 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		rholang.parsing.rholang2.Absyn.Value p_1 = (rholang.parsing.rholang2.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.PValue(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Proc4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Proc4 ::= _SYMB_15 
            {
              rholang.parsing.rholang2.Absyn.Proc RESULT = null;
		 RESULT = new rholang.parsing.rholang2.Absyn.PNil(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Proc4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Contr ::= _SYMB_17 Name _SYMB_0 ListCPattern _SYMB_1 _SYMB_2 _SYMB_3 Proc _SYMB_4 
            {
              rholang.parsing.rholang2.Absyn.Contr RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		rholang.parsing.rholang2.Absyn.ListCPattern p_4 = (rholang.parsing.rholang2.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		rholang.parsing.rholang2.Absyn.Proc p_8 = (rholang.parsing.rholang2.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.rholang2.Absyn.DContr(p_2,p_4,p_8); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Contr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Contr EOF 
            {
              Object RESULT = null;
		rholang.parsing.rholang2.Absyn.Contr start_val = (rholang.parsing.rholang2.Absyn.Contr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

