// -*- Java -*- This Cup file was machine-generated by BNFC
package rholang.parsing.rholang2;

parser code {:
  public rholang.parsing.rholang2.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (rholang.parsing.rholang2.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal rholang.parsing.rholang2.Absyn.Contr Contr;
nonterminal rholang.parsing.rholang2.Absyn.Proc Proc4;
nonterminal rholang.parsing.rholang2.Absyn.Proc Proc3;
nonterminal rholang.parsing.rholang2.Absyn.Proc Proc2;
nonterminal rholang.parsing.rholang2.Absyn.Proc Proc1;
nonterminal rholang.parsing.rholang2.Absyn.Proc Proc;
nonterminal rholang.parsing.rholang2.Absyn.ListProc ListProc;
nonterminal rholang.parsing.rholang2.Absyn.Chan Chan;
nonterminal rholang.parsing.rholang2.Absyn.Bind Bind;
nonterminal rholang.parsing.rholang2.Absyn.ListBind ListBind;
nonterminal rholang.parsing.rholang2.Absyn.PMBranch PMBranch;
nonterminal rholang.parsing.rholang2.Absyn.ListPMBranch ListPMBranch;
nonterminal rholang.parsing.rholang2.Absyn.CBranch CBranch;
nonterminal rholang.parsing.rholang2.Absyn.ListCBranch ListCBranch;
nonterminal rholang.parsing.rholang2.Absyn.Value Value;
nonterminal rholang.parsing.rholang2.Absyn.Quantity Quantity;
nonterminal rholang.parsing.rholang2.Absyn.Entity Entity;
nonterminal rholang.parsing.rholang2.Absyn.Struct Struct;
nonterminal rholang.parsing.rholang2.Absyn.Collect Collect;
nonterminal rholang.parsing.rholang2.Absyn.VarPattern VarPattern;
nonterminal rholang.parsing.rholang2.Absyn.ListVarPattern ListVarPattern;
nonterminal rholang.parsing.rholang2.Absyn.PPattern PPattern4;
nonterminal rholang.parsing.rholang2.Absyn.PPattern PPattern3;
nonterminal rholang.parsing.rholang2.Absyn.PPattern PPattern2;
nonterminal rholang.parsing.rholang2.Absyn.PPattern PPattern1;
nonterminal rholang.parsing.rholang2.Absyn.PPattern PPattern;
nonterminal rholang.parsing.rholang2.Absyn.ListPPattern ListPPattern;
nonterminal rholang.parsing.rholang2.Absyn.CPattern CPattern;
nonterminal rholang.parsing.rholang2.Absyn.ListCPattern ListCPattern;
nonterminal rholang.parsing.rholang2.Absyn.PatternBind PatternBind;
nonterminal rholang.parsing.rholang2.Absyn.ListPatternBind ListPatternBind;
nonterminal rholang.parsing.rholang2.Absyn.PatternPatternMatch PatternPatternMatch;
nonterminal rholang.parsing.rholang2.Absyn.ListPatternPatternMatch ListPatternPatternMatch;
nonterminal rholang.parsing.rholang2.Absyn.ValPattern ValPattern;
nonterminal rholang.parsing.rholang2.Absyn.ListVar ListVar;
nonterminal rholang.parsing.rholang2.Absyn.ListName ListName;

terminal _SYMB_0;    //   (
terminal _SYMB_1;    //   )
terminal _SYMB_2;    //   =
terminal _SYMB_3;    //   {
terminal _SYMB_4;    //   }
terminal _SYMB_5;    //   *
terminal _SYMB_6;    //   #
terminal _SYMB_7;    //   !
terminal _SYMB_8;    //   |
terminal _SYMB_9;    //   ,
terminal _SYMB_10;    //   @
terminal _SYMB_11;    //   <-
terminal _SYMB_12;    //   ;
terminal _SYMB_13;    //   =>
terminal _SYMB_14;    //   _
terminal _SYMB_15;    //   Nil
terminal _SYMB_16;    //   case
terminal _SYMB_17;    //   contract
terminal _SYMB_18;    //   for
terminal _SYMB_19;    //   in
terminal _SYMB_20;    //   match
terminal _SYMB_21;    //   new
terminal _SYMB_22;    //   select
terminal _SYMB_23;    //   with

terminal String _STRING_;
terminal Character _CHAR_;
terminal Integer _INTEGER_;
terminal Double _DOUBLE_;


terminal String Name;
terminal String Var;


start with Contr;


Contr ::= _SYMB_17 Name:p_2 _SYMB_0 ListCPattern:p_4 _SYMB_1 _SYMB_2 _SYMB_3 Proc:p_8 _SYMB_4  {: RESULT = new rholang.parsing.rholang2.Absyn.DContr(p_2,p_4,p_8); :} 
;
Proc4 ::= _SYMB_15  {: RESULT = new rholang.parsing.rholang2.Absyn.PNil(); :} 
  | Value:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.PValue(p_1); :}
  | Var:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.PVar(p_1); :}
  | _SYMB_0 Proc:p_2 _SYMB_1  {: RESULT = p_2; :}
;
Proc3 ::= _SYMB_5 Chan:p_2  {: RESULT = new rholang.parsing.rholang2.Absyn.PDrop(p_2); :} 
  | _SYMB_6 Chan:p_2  {: RESULT = new rholang.parsing.rholang2.Absyn.PInject(p_2); :}
  | Proc4:p_1  {: RESULT = p_1; :}
;
Proc2 ::= Chan:p_1 _SYMB_7 _SYMB_0 ListProc:p_4 _SYMB_1  {: RESULT = new rholang.parsing.rholang2.Absyn.PLift(p_1,p_4); :} 
  | Proc3:p_1  {: RESULT = p_1; :}
;
Proc1 ::= _SYMB_18 _SYMB_0 ListBind:p_3 _SYMB_1 _SYMB_3 Proc:p_6 _SYMB_4  {: RESULT = new rholang.parsing.rholang2.Absyn.PInput(p_3,p_6); :} 
  | _SYMB_22 _SYMB_3 ListCBranch:p_3 _SYMB_4  {: RESULT = new rholang.parsing.rholang2.Absyn.PChoice(p_3); :}
  | _SYMB_20 Proc:p_2 _SYMB_23 ListPMBranch:p_4  {: RESULT = new rholang.parsing.rholang2.Absyn.PMatch(p_2,p_4); :}
  | _SYMB_21 ListVar:p_2 _SYMB_19 Proc1:p_4  {: RESULT = new rholang.parsing.rholang2.Absyn.PNew(p_2,p_4); :}
  | Name:p_1 _SYMB_0 ListProc:p_3 _SYMB_1  {: RESULT = new rholang.parsing.rholang2.Absyn.PConstr(p_1,p_3); :}
  | Proc2:p_1  {: RESULT = p_1; :}
;
Proc ::= Proc:p_1 _SYMB_8 Proc1:p_3  {: RESULT = new rholang.parsing.rholang2.Absyn.PPar(p_1,p_3); :} 
  | Proc1:p_1  {: RESULT = p_1; :}
;
ListProc ::= Proc:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ListProc(); RESULT.addLast(p_1); :} 
  | Proc:p_1 _SYMB_9 ListProc:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Chan ::= Var:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.CVar(p_1); :} 
  | _SYMB_10 Proc3:p_2  {: RESULT = new rholang.parsing.rholang2.Absyn.CQuote(p_2); :}
;
Bind ::= CPattern:p_1 _SYMB_11 Chan:p_3  {: RESULT = new rholang.parsing.rholang2.Absyn.InputBind(p_1,p_3); :} 
;
ListBind ::= Bind:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ListBind(); RESULT.addLast(p_1); :} 
  | Bind:p_1 _SYMB_12 ListBind:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PMBranch ::= PPattern:p_1 _SYMB_13 _SYMB_3 Proc:p_4 _SYMB_4  {: RESULT = new rholang.parsing.rholang2.Absyn.PatternMatch(p_1,p_4); :} 
;
ListPMBranch ::= PMBranch:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ListPMBranch(); RESULT.addLast(p_1); :} 
  | PMBranch:p_1 ListPMBranch:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
CBranch ::= _SYMB_16 ListBind:p_2 _SYMB_13 _SYMB_3 Proc:p_5 _SYMB_4  {: RESULT = new rholang.parsing.rholang2.Absyn.Choice(p_2,p_5); :} 
;
ListCBranch ::= CBranch:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ListCBranch(); RESULT.addLast(p_1); :} 
  | CBranch:p_1 ListCBranch:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
Value ::= Quantity:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.VQuant(p_1); :} 
  | Entity:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.VEnt(p_1); :}
;
Quantity ::= _INTEGER_:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.QInt(p_1); :} 
  | _DOUBLE_:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.QDouble(p_1); :}
;
Entity ::= _CHAR_:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.EChar(p_1); :} 
  | Struct:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.EStruct(p_1); :}
  | Collect:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ECollect(p_1); :}
;
Struct ::= Var:p_1 _SYMB_3 ListProc:p_3 _SYMB_4  {: RESULT = new rholang.parsing.rholang2.Absyn.StructConstr(p_1,p_3); :} 
;
Collect ::= _STRING_:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.CString(p_1); :} 
;
VarPattern ::= Var:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.VarPtVar(p_1); :} 
  | _SYMB_14  {: RESULT = new rholang.parsing.rholang2.Absyn.VarPtWild(); :}
;
ListVarPattern ::=  /* empty */  {: RESULT = new rholang.parsing.rholang2.Absyn.ListVarPattern(); :} 
  | VarPattern:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ListVarPattern(); RESULT.addLast(p_1); :}
  | VarPattern:p_1 _SYMB_9 ListVarPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PPattern4 ::= VarPattern:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.PPtVar(p_1); :} 
  | _SYMB_15  {: RESULT = new rholang.parsing.rholang2.Absyn.PPtNil(); :}
  | ValPattern:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.PPtVal(p_1); :}
  | _SYMB_0 PPattern:p_2 _SYMB_1  {: RESULT = p_2; :}
;
PPattern3 ::= _SYMB_5 CPattern:p_2  {: RESULT = new rholang.parsing.rholang2.Absyn.PPtDrop(p_2); :} 
  | _SYMB_6 CPattern:p_2  {: RESULT = new rholang.parsing.rholang2.Absyn.PPtInject(p_2); :}
  | PPattern4:p_1  {: RESULT = p_1; :}
;
PPattern2 ::= CPattern:p_1 _SYMB_7 _SYMB_0 ListPPattern:p_4 _SYMB_1  {: RESULT = new rholang.parsing.rholang2.Absyn.PPtOutput(p_1,p_4); :} 
  | PPattern3:p_1  {: RESULT = p_1; :}
;
PPattern1 ::= _SYMB_18 _SYMB_0 ListPatternBind:p_3 _SYMB_1 _SYMB_3 PPattern:p_6 _SYMB_4  {: RESULT = new rholang.parsing.rholang2.Absyn.PPtInput(p_3,p_6); :} 
  | _SYMB_20 PPattern:p_2 _SYMB_23 ListPatternPatternMatch:p_4  {: RESULT = new rholang.parsing.rholang2.Absyn.PPtMatch(p_2,p_4); :}
  | _SYMB_21 ListVarPattern:p_2 _SYMB_19 PPattern1:p_4  {: RESULT = new rholang.parsing.rholang2.Absyn.PPtNew(p_2,p_4); :}
  | Name:p_1 _SYMB_0 ListPPattern:p_3 _SYMB_1  {: RESULT = new rholang.parsing.rholang2.Absyn.PPtConstr(p_1,p_3); :}
  | PPattern2:p_1  {: RESULT = p_1; :}
;
PPattern ::= PPattern:p_1 _SYMB_8 PPattern1:p_3  {: RESULT = new rholang.parsing.rholang2.Absyn.PPtPar(p_1,p_3); :} 
  | PPattern1:p_1  {: RESULT = p_1; :}
;
ListPPattern ::=  /* empty */  {: RESULT = new rholang.parsing.rholang2.Absyn.ListPPattern(); :} 
  | PPattern:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ListPPattern(); RESULT.addLast(p_1); :}
  | PPattern:p_1 _SYMB_9 ListPPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
CPattern ::= VarPattern:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.CPtVar(p_1); :} 
  | _SYMB_10 PPattern3:p_2  {: RESULT = new rholang.parsing.rholang2.Absyn.CPtQuote(p_2); :}
;
ListCPattern ::=  /* empty */  {: RESULT = new rholang.parsing.rholang2.Absyn.ListCPattern(); :} 
  | CPattern:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ListCPattern(); RESULT.addLast(p_1); :}
  | CPattern:p_1 _SYMB_9 ListCPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PatternBind ::= CPattern:p_1 _SYMB_11 CPattern:p_3  {: RESULT = new rholang.parsing.rholang2.Absyn.PtBind(p_1,p_3); :} 
;
ListPatternBind ::= PatternBind:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ListPatternBind(); RESULT.addLast(p_1); :} 
  | PatternBind:p_1 _SYMB_12 ListPatternBind:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PatternPatternMatch ::= PPattern:p_1 _SYMB_13 _SYMB_3 PPattern:p_4 _SYMB_4  {: RESULT = new rholang.parsing.rholang2.Absyn.PtBranch(p_1,p_4); :} 
;
ListPatternPatternMatch ::= PatternPatternMatch:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); :} 
  | PatternPatternMatch:p_1 ListPatternPatternMatch:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
ValPattern ::= Var:p_1 _SYMB_3 ListPPattern:p_3 _SYMB_4  {: RESULT = new rholang.parsing.rholang2.Absyn.VPtStruct(p_1,p_3); :} 
;
ListVar ::= Var:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ListVar(); RESULT.addLast(p_1); :} 
  | Var:p_1 _SYMB_9 ListVar:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListName ::= Name:p_1  {: RESULT = new rholang.parsing.rholang2.Absyn.ListName(); RESULT.addLast(p_1); :} 
  | Name:p_1 _SYMB_9 ListName:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

