
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 30 17:07:14 CEST 2016
//----------------------------------------------------

package rholang.parsing.lambda;


/** CUP v0.10k generated parser.
  * @version Thu Jun 30 17:07:14 CEST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\003\005\000\002\004" +
    "\003\000\002\004\003\000\002\004\010\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\005\007\000\002\005\011\000\002" +
    "\006\003\000\002\006\003\000\002\007\003\000\002\007" +
    "\005\000\002\010\003\000\002\010\003\000\002\011\005" +
    "\000\002\011\003\000\002\012\007\000\002\012\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\022\005\010\007\007\013\005\014\004\015" +
    "\016\016\013\017\014\021\017\001\002\000\022\005\010" +
    "\007\007\013\005\014\004\015\016\016\013\017\014\021" +
    "\017\001\002\000\022\005\010\007\007\013\005\014\004" +
    "\015\016\016\013\017\014\021\017\001\002\000\004\004" +
    "\056\001\002\000\022\005\010\007\007\013\005\014\004" +
    "\015\016\016\013\017\014\021\017\001\002\000\004\021" +
    "\023\001\002\000\004\004\ufffb\001\002\000\004\004\ufffe" +
    "\001\002\000\004\004\ufff4\001\002\000\004\004\ufff5\001" +
    "\002\000\024\002\022\005\010\007\007\013\005\014\004" +
    "\015\016\016\013\017\014\021\017\001\002\000\022\005" +
    "\010\007\007\013\005\014\004\015\016\016\013\017\014" +
    "\021\017\001\002\000\004\004\uffff\001\002\000\024\004" +
    "\ufff8\005\010\007\007\013\005\014\004\015\016\016\013" +
    "\017\014\021\017\001\002\000\024\004\ufffc\005\010\007" +
    "\007\013\005\014\004\015\016\016\013\017\014\021\017" +
    "\001\002\000\004\002\001\001\002\000\004\004\024\001" +
    "\002\000\006\007\026\020\030\001\002\000\036\002\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1" +
    "\001\002\000\006\007\026\020\030\001\002\000\004\006" +
    "\035\001\002\000\036\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\021\ufff3\001\002\000\036\002\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0" +
    "\001\002\000\036\002\uffee\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\033\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\021\uffee\001\002\000\006\007\026\020" +
    "\030\001\002\000\034\002\uffef\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\021\uffef\001\002\000\022\005\010\007\007" +
    "\013\005\014\004\015\016\016\013\017\014\021\017\001" +
    "\002\000\024\004\ufffd\005\010\007\007\013\005\014\004" +
    "\015\016\016\013\017\014\021\017\001\002\000\006\010" +
    "\040\011\041\001\002\000\006\007\026\020\030\001\002" +
    "\000\036\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\021\ufff2\001\002\000\006\010\043\011\044\001" +
    "\002\000\006\007\026\020\030\001\002\000\036\002\uffed" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\021\uffed" +
    "\001\002\000\004\011\046\001\002\000\036\002\uffec\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec\001" +
    "\002\000\024\005\010\007\007\010\050\013\005\014\004" +
    "\015\016\016\013\017\014\021\017\001\002\000\022\005" +
    "\010\007\007\013\005\014\004\015\016\016\013\017\014" +
    "\021\017\001\002\000\026\005\010\007\007\010\053\011" +
    "\052\013\005\014\004\015\016\016\013\017\014\021\017" +
    "\001\002\000\004\004\ufff7\001\002\000\022\005\010\007" +
    "\007\013\005\014\004\015\016\016\013\017\014\021\017" +
    "\001\002\000\024\005\010\007\007\011\055\013\005\014" +
    "\004\015\016\016\013\017\014\021\017\001\002\000\004" +
    "\004\ufff6\001\002\000\006\007\026\020\030\001\002\000" +
    "\032\002\000\004\000\005\000\007\000\010\000\011\000" +
    "\013\000\014\000\015\000\016\000\017\000\021\000\001" +
    "\002\000\024\004\ufffa\005\010\007\007\013\005\014\004" +
    "\015\016\016\013\017\014\021\017\001\002\000\024\004" +
    "\ufff9\005\010\007\007\013\005\014\004\015\016\016\013" +
    "\017\014\021\017\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\012\003\014\004\005\005\010\006\011\001" +
    "\001\000\012\003\060\004\005\005\010\006\011\001\001" +
    "\000\012\003\057\004\005\005\010\006\011\001\001\000" +
    "\002\001\001\000\012\003\046\004\005\005\010\006\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\020" +
    "\004\005\005\010\006\011\001\001\000\012\003\017\004" +
    "\005\005\010\006\011\001\001\000\002\001\001\000\012" +
    "\003\020\004\005\005\010\006\011\001\001\000\012\003" +
    "\020\004\005\005\010\006\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\030\010\031\011\026\012" +
    "\024\001\001\000\002\001\001\000\012\007\030\010\031" +
    "\011\036\012\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\030" +
    "\010\031\011\033\012\024\001\001\000\002\001\001\000" +
    "\012\003\035\004\005\005\010\006\011\001\001\000\012" +
    "\003\020\004\005\005\010\006\011\001\001\000\002\001" +
    "\001\000\012\007\030\010\031\011\041\012\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\030\010" +
    "\031\011\044\012\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\020\004\005\005" +
    "\010\006\011\001\001\000\012\003\050\004\005\005\010" +
    "\006\011\001\001\000\012\003\020\004\005\005\010\006" +
    "\011\001\001\000\002\001\001\000\012\003\053\004\005" +
    "\005\010\006\011\001\001\000\012\003\020\004\005\005" +
    "\010\006\011\001\001\000\002\001\001\000\012\007\030" +
    "\010\031\011\056\012\024\001\001\000\002\001\001\000" +
    "\012\003\020\004\005\005\010\006\011\001\001\000\012" +
    "\003\020\004\005\005\010\006\011\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public rholang.parsing.lambda.Absyn.TypedExpr pTypedExpr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (rholang.parsing.lambda.Absyn.TypedExpr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TType ::= _SYMB_3 Type _SYMB_4 Type _SYMB_4 Type _SYMB_5 
            {
              rholang.parsing.lambda.Absyn.TType RESULT = null;
		rholang.parsing.lambda.Absyn.Type p_2 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		rholang.parsing.lambda.Absyn.Type p_4 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.lambda.Absyn.Type p_6 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.TType3(p_2,p_4,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*TType*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TType ::= _SYMB_3 Type _SYMB_4 Type _SYMB_5 
            {
              rholang.parsing.lambda.Absyn.TType RESULT = null;
		rholang.parsing.lambda.Absyn.Type p_2 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.lambda.Absyn.Type p_4 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.TType2(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*TType*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= Type1 
            {
              rholang.parsing.lambda.Absyn.Type RESULT = null;
		rholang.parsing.lambda.Absyn.Type p_1 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= Type1 _SYMB_6 Type 
            {
              rholang.parsing.lambda.Absyn.Type RESULT = null;
		rholang.parsing.lambda.Absyn.Type p_1 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.lambda.Absyn.Type p_3 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.TFun(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type1 ::= Type2 
            {
              rholang.parsing.lambda.Absyn.Type RESULT = null;
		rholang.parsing.lambda.Absyn.Type p_1 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type1 ::= TType 
            {
              rholang.parsing.lambda.Absyn.Type RESULT = null;
		rholang.parsing.lambda.Absyn.TType p_1 = (rholang.parsing.lambda.Absyn.TType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.TTuple(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Type1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type2 ::= _SYMB_3 Type _SYMB_5 
            {
              rholang.parsing.lambda.Absyn.Type RESULT = null;
		rholang.parsing.lambda.Absyn.Type p_2 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Type2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type2 ::= SimpleType 
            {
              rholang.parsing.lambda.Absyn.Type RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.TSimple(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Type2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Value ::= _STRING_ 
            {
              rholang.parsing.lambda.Absyn.Value RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.VString(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Value*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Value ::= _INTEGER_ 
            {
              rholang.parsing.lambda.Absyn.Value RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.VInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Value*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Tuple ::= _SYMB_3 TypedExpr _SYMB_4 TypedExpr _SYMB_4 TypedExpr _SYMB_5 
            {
              rholang.parsing.lambda.Absyn.Tuple RESULT = null;
		rholang.parsing.lambda.Absyn.TypedExpr p_2 = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		rholang.parsing.lambda.Absyn.TypedExpr p_4 = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.lambda.Absyn.TypedExpr p_6 = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.Tuple3(p_2,p_4,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Tuple*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Tuple ::= _SYMB_3 TypedExpr _SYMB_4 TypedExpr _SYMB_5 
            {
              rholang.parsing.lambda.Absyn.Tuple RESULT = null;
		rholang.parsing.lambda.Absyn.TypedExpr p_2 = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.lambda.Absyn.TypedExpr p_4 = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.Tuple2(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Tuple*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_9 TypedExpr 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT = null;
		rholang.parsing.lambda.Absyn.TypedExpr p_2 = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.EThird(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_8 TypedExpr 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT = null;
		rholang.parsing.lambda.Absyn.TypedExpr p_2 = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.ESecond(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expr ::= _SYMB_7 TypedExpr 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT = null;
		rholang.parsing.lambda.Absyn.TypedExpr p_2 = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.EFirst(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expr ::= Tuple 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT = null;
		rholang.parsing.lambda.Absyn.Tuple p_1 = (rholang.parsing.lambda.Absyn.Tuple)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.ETuple(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expr ::= TypedExpr TypedExpr 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT = null;
		rholang.parsing.lambda.Absyn.TypedExpr p_1 = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rholang.parsing.lambda.Absyn.TypedExpr p_2 = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.EApp(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Expr ::= _SYMB_1 Var _SYMB_0 Type _SYMB_2 TypedExpr 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.lambda.Absyn.Type p_4 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.lambda.Absyn.TypedExpr p_6 = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.EAbs(p_2,p_4,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Expr ::= Value 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT = null;
		rholang.parsing.lambda.Absyn.Value p_1 = (rholang.parsing.lambda.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.EVal(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Expr ::= Var 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.EVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Expr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TypedExpr ::= Expr _SYMB_0 Type 
            {
              rholang.parsing.lambda.Absyn.TypedExpr RESULT = null;
		rholang.parsing.lambda.Absyn.Expr p_1 = (rholang.parsing.lambda.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.lambda.Absyn.Type p_3 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.ETyped(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*TypedExpr*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= TypedExpr EOF 
            {
              Object RESULT = null;
		rholang.parsing.lambda.Absyn.TypedExpr start_val = (rholang.parsing.lambda.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

