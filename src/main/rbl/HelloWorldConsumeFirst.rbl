;;; This demonstrates a HelloWorld pseudo contract that
;;; suspends on the consume call until the produce is executed.
;;;
;;; The space.rbl must be loaded into the Rosette REPL context
;;; before this file is executed.
;;;
;;; Expected output of this script:
;;; "Hello World!"

(define t (new NameSpace))
(defOprn HelloWorld)

(defActor HelloWorldContract
	(method (HelloWorld world1 world2)
		(let [[ [[[ptrn binding] product]] (consume t world1 'msg)]]
			((proc [[ptrn product]] (print product)) [ptrn product])
		)
	)
)

(define contract (new HelloWorldContract))

;;; Invoke contract
(HelloWorld contract 'world1 'world2)

;;; Silently discard result of produce
;;; Otherwise it would misleadingly two copies of "Hello World!"
(let [[result (produce t 'world1 'msg "Hello World!")]] #niv)

