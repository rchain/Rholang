;; -*- mode: Lisp;-*- 
;; Filename:    space.rbl 
;; Authors:     luciusmeredith                                                    
;; Creation:    Thu Feb 23 18:57:26 2017 
;; Copyright:   See site license
;; Description: Basic Linda pattern
;; ------------------------------------------------------------------------

(defOprn consume)
(defOprn produce)
(defOprn match?)
(defOprn production?)

(defActor NameSpace (slots& chart (new RblTable))
    ;;; Temporary implementations of NameSpace predicates
    ;;; TODO: Fully implement and potentially move out of NameSpace?
    (method (match? ptrn candidate) (if (type? ptrn candidate) (seq (update) ((proc [ptrn] ptrn) candidate)) (seq (update) #niv)) )
    ;;; storedValue is the tuple [data continuation]
    (method (production? storedValue) (seq (update) (not (niv? (head storedValue)))))
)

(defOprn tuplespace-tbl-get-or-create)
(defPure RblTable (tuplespace-tbl-get-or-create channel)
    (let [[subspace (tbl-get (self) channel)]]
        (if (absent? subspace)
            (seq
                (tbl-add (self) channel (new RblTable))
                (tbl-get (self) channel)
            )
            subspace
        )
    )
)

(defRMethod NameSpace (consume ctxt & location)
 ;;; by makng this a reflective method - RMethod - we gain access to the awaiting continuation
 ;;; bound to the formal parameter ctxt
  (let* [[[channel ptrn] location]
  ;;; the channel and the pattern of incoming messages to look for are destructured and bound
        [subspace (tuplespace-tbl-get-or-create chart channel)]
                ;;; the incoming messages associated with the channel are collected in a subtable
                ;;; in this sense we can see that the semantic framework supports a compositional
                ;;; topic/subtopic/subsubtopic/â€¦ structuring technique that unifies message passing
                ;;; with content delivery primitives
                ;;; the channel name becomes the topic, and the pattern structure becomes
                ;;; the subtopic tree
                ;;; this also unifies with the URL view of resource access
       [candidates (names subspace)]
       [[extractions remainder]
          (fold candidates
            (proc [e acc k]
                (let [[[hits misses] acc]
                [binding (match? NameSpace ptrn e)]]
            (if (niv? binding)
                (k [hits [e & misses]])
                (k [[[e binding] & hits] misses])))) [[] []])]
                  ;;; note that this is generic in the match? and miss? predicates
                  ;;; matching could be unification (as it is in SpecialK) or it could be
                  ;;; a number of other special purpose protocols
                  ;;; the price for this genericity is performance
                  ;;; there is decent research showing that there are hashing disciplines
                  ;;; that could provide a better than reasonable approximation of unification
       [[productions consummation]
            (fold extractions
              (proc [[e binding] acc k]
                (let* [[[productions consumers] acc]
                      [storedValue (tbl-get subspace e)]
                      [[data continuation] storedValue]
                     ]
                  (if (production? NameSpace storedValue)
               (k [[[[e binding] data] & productions] consumers])
               (k [productions [[e continuation] & consumers]])))) [[] []])]]
                  ;;; this divides the hits into those matches that are data and
                  ;;; those matches that are continuations
                  ;;; and the rest of the code sends data to the awaiting continuation
                  ;;; and appends the continuation to those matches that are currently
                  ;;; data starved
                  ;;; this is a much more fine-grained view of excluded middle

   (seq
     (map productions
       ;;; TODO: Eliminate _ by changing implementation of map over productions
       (proc [_ [[ptrn binding] product]]
            (tbl-del subspace ptrn)))
     ;;; Return data (productions) back and execute the continuation.
     ;;; If there was no match that was data, the thread will remain suspended.
     (if (not (null? productions))
        (seq
            (update!)
            (ctxt-rtn ctxt productions)
        )
        (seq
            (print "DEBUG: Waiting for data")
            ;;; TODO: Potentially revert to original form
            ;;; (map consummation (proc [[ptrn consumers]] (tbl-add subspace ptrn [#niv (reverse [ctxt & (reverse consumers)])])))
            (tbl-add subspace ptrn [#niv ctxt])
            (update!)
        )
     )
    )
  )
)

;;; This code is perfectly dual to the consumer code and so all the comments
;;; there apply in the corresponging code sites
(defRMethod NameSpace (produce ctxt & production)
 (let* [[[channel ptrn product] production]
        [subspace (tuplespace-tbl-get-or-create chart channel)]
       [candidates (names subspace)]
       [[extractions remainder]
          (fold candidates
            (proc [e acc k]
                (let [[[hits misses] acc]
                [binding (match? NameSpace ptrn e)]]
                    (if (niv? binding)
                        (k [hits [e & misses]])
                        (k [[[e binding] & hits] misses])))) [[] []])]
       [[productions consummation]
            (fold extractions
              (proc [[e binding] acc k]
                (let* [[[productions consumers] acc]
                      [storedValue (tbl-get subspace e)]
                      [[data continuation] storedValue]
                     ]
                  (if (production? NameSpace storedValue)
               (k [[] consumers])
               (k [productions [[[e binding] continuation] & consumers]])))) [[] []])]]
   (seq
      ;;; TODO: Original form of `(tbl-add subspace ptrn product)`. Potentially revert.
      ;;; (map productions (proc [ptrn product] (tbl-add subspace ptrn product)))
     (tbl-add subspace ptrn [product #niv])
     (map consummation
        ;;; TODO: Eliminate _index by changing implementation of map over consummation
       (proc [_index [[ptrn binding] consumers]]
       (seq
            (tbl-del subspace ptrn)
            ;;; TODO: Assumes that consumers is just a single continuation not a list of continuations
            ;;; See below for previous implementation
            ;;;(map consumers
            ;;;  (proc [consumer]
            ;;;    (send ctxt-rtn consumer [product binding])
            ;;;    binding))

            (send ctxt-rtn consumers [[[ptrn binding] product]])
            binding
       )))
     (update!)
     (ctxt-rtn ctxt product))))
